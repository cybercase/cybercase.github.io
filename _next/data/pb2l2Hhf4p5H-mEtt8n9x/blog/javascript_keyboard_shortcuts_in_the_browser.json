{"pageProps":{"post":{"slug":"javascript_keyboard_shortcuts_in_the_browser","title":"Keyboard Shortcuts and Layouts in the Browser","description":"Defining layout independent keyboard shortcuts in the browser","date":"2017-05-22T00:00:01.000Z","coverImage":"/images/keyboard.png","coverTitle":"Keyboard Shortcuts and Layouts in the Browser","coverDark":true,"content":"<p>Current DOM specification provides 2 event types for handling keyboard actions<sup><a href=\"#keypress\">[1]</a></sup>:</p>\n<ul>\n<li><code>keydown</code></li>\n<li><code>keyup</code></li>\n</ul>\n<p>These events match the physical actions of pressing and releasing a key of the keyboard, and have a payload with the\nresult of <em>keymapping</em><sup><a href=\"#keymapping\">[2]</a></sup> by the OS (or any software in between), taking into account current <em>layout</em>, modifier and dead keys.</p>\n<p>The result of <em>keymapping</em> is stored in the <code>key</code> property of the event according to the <em>key algorithm</em><sup><a href=\"#keyproperty\">[3]</a></sup>.\nThe pressing of a specific key can be caught just by listening for <code>keydown</code> and checking the <code>key</code> prop. e.g.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">shortcutHandler</span> = (<span class=\"hljs-params\">event</span>) => {\n    <span class=\"hljs-comment\">// Shortcut: l</span>\n    <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">key</span> === <span class=\"hljs-string\">'l'</span>) {\n        <span class=\"hljs-comment\">// Simplest case; Facebook use the same shortcut to like items in the feed.</span>\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'\"l\" is pressed'</span>)\n    }\n}\n\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'keydown'</span>, shortcutHandler)\n</code></pre>\n<h2>Modifiers</h2>\n<p>Keyboard shortcuts may require the combination of a character key and one or more modifiers<sup><a href=\"#modifier\">[4]</a></sup>.\nModifiers like <code>Meta</code> or <code>Ctrl</code> usually don’t have the purpose of altering the unicode produced by a key,\nso it’s easy to define and catch a shortcut combination using the modifiers props stored in the event payload. e.g.</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">let</span> shortcutHandler = (<span class=\"hljs-keyword\">event</span>) => {\n    <span class=\"hljs-comment\">// Shortcut: Meta+c</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">event</span>.key === <span class=\"hljs-string\">'c'</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.metaKey === <span class=\"hljs-literal\">true</span>) {\n        <span class=\"hljs-comment\">// The famous \"Copy\" shortcut on macOS</span>\n        console.log(<span class=\"hljs-string\">'\"Meta+c\" pressed'</span>)\n    }\n}\n</code></pre>\n<p>On the other hand <code>Alt</code> and <code>Shift</code> modifiers may alter the unicode produced by a key, leading to issues in shortcut definition and catching. e.g.</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-keyword\">let</span> shortcutHandler = (<span class=\"hljs-keyword\">event</span>) => {\n    // Shortcut: Meta+Shift+s\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">event</span>.<span class=\"hljs-keyword\">key</span> === <span class=\"hljs-comment\">'s' &#x26;&#x26; event.metaKey === true &#x26;&#x26; event.shiftKey) {</span>\n        // The <span class=\"hljs-string\">\"Save All\"</span> shortcut\n        console.log(<span class=\"hljs-comment\">'\"Meta+Shift+s\" pressed')</span>\n\n        // WARNING\n        // This won<span class=\"hljs-comment\">'t work becase the \"Shift\" modifier change the unicode</span>\n        // <span class=\"hljs-keyword\">of</span> <span class=\"hljs-string\">\"S\"</span> <span class=\"hljs-keyword\">key</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"s\"</span> (lowercase) <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">\"S\"</span> (uppercase)\n    }\n}\n</code></pre>\n<h2>Normalization</h2>\n<p>Fixing the previous example is trivial: just replace the lowercase “s” with the uppercase “S” in the shortcut definition.\nThe new definition considers the effect produced from the <code>Shift</code> modifier, making the code work just fine. e.g.</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">let</span> shortcutHandler = (<span class=\"hljs-keyword\">event</span>) => {\n    <span class=\"hljs-comment\">// Shortcut: Meta+Shift+S</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">event</span>.key === <span class=\"hljs-string\">'S'</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.metaKey === <span class=\"hljs-literal\">true</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.shiftKey) {\n        <span class=\"hljs-comment\">// The Normalized \"Save All\" shortcut</span>\n        console.log(<span class=\"hljs-string\">'\"Meta+Shift+S\" pressed'</span>)\n\n        <span class=\"hljs-comment\">// This works as expected</span>\n    }\n}\n</code></pre>\n<p>Let’s call <strong>Normalization</strong> the action of replacing of the\ncharacter key in a keyboard shortcut, with the unicode produced from the same character key plus the modifiers in the shortcut.</p>\n<h2>Layouts</h2>\n<p>Normalization falls short when considering multiple layouts; in fact it’s layout dependant. e.g.:</p>\n<ul>\n<li>Normalization<sub>US</sub> for <code>Meta + Shift + 2</code> is <code>Meta + Shift + @</code></li>\n<li>Normalization<sub>IT</sub> for <code>Meta + Shift + 2</code> is <code>Meta + Shift + \"</code></li>\n<li>Normalization<sub>FR</sub> for <code>Meta + Shift + 2</code> is <code>Meta + Shift + 2</code>.</li>\n</ul>\n<p>This limits the Normalization effectiveness to just the shortcuts that use a character key for which its modified unicode char, according to the shortcut modifiers, is the same across every layout.\nLet’s call these shortcuts <em>layout-safe</em>. e.g.:</p>\n<ul>\n<li>Any lowercase [a-z] letter plus the <code>Shift</code> modifier should produce the uppercase version of that letter in every layout.</li>\n</ul>\n<h2>Recap</h2>\n<p>When definining shortcuts for the browsers and multiple layouts it’s worth considering that:</p>\n<ul>\n<li>Browsers and OS catch shortcuts too; be aware of collisions.</li>\n<li>Browsers don’t provide an API for knowing the current layout.</li>\n<li>Some key may not be available on some layouts or may require additional modifiers to produce the same character.</li>\n<li>If the shortcut contains a character key, modifiers may change the unicode emitted by the <code>keydown</code> in an unpredictable way.</li>\n</ul>\n<h2>Workaround Ideas</h2>\n<h3>Catch ‘Em All</h3>\n<p>Given a shortcut, the idea is to collect its Normalization for every layout and listening for all of them.</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">let</span> shortcutHandler = (<span class=\"hljs-keyword\">event</span>) => {\n    <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-keyword\">event</span>.key === <span class=\"hljs-string\">'2'</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.metaKey === <span class=\"hljs-literal\">true</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.shiftKey) ||\n        (<span class=\"hljs-keyword\">event</span>.key === <span class=\"hljs-string\">'\"'</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.metaKey === <span class=\"hljs-literal\">true</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.shiftKey) ||\n        (<span class=\"hljs-keyword\">event</span>.key === <span class=\"hljs-string\">'@'</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.metaKey === <span class=\"hljs-literal\">true</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.shiftKey)) {\n        <span class=\"hljs-comment\">// This catches the \"Meta+Shift+2\" on US, IT, and FR layouts</span>\n        console.log(<span class=\"hljs-string\">'\"Meta+Shift+2\" pressed'</span>)\n    }\n}\n</code></pre>\n<p>The obvious problem is that every shortcut ends up producing a set of Normalized shortcuts, and if the interesection of these sets is not empty it’s impossible to choose which shortcut was triggered. e.g.</p>\n<ol>\n<li>Normalization<sub>[US, IT]</sub> for <code>Meta+Shift+=</code> is [<code>Meta+Shift++</code>, <code>Meta+Shift+*</code>]</li>\n<li>Normalization<sub>[US, IT]</sub> for <code>Meta+Shift+8</code> is [<code>Meta+Shift+*</code>, <code>Meta+Shift+(</code>]</li>\n</ol>\n<p>Clearly <code>Meta+Shift+*</code> falls into the intersection, making impossible to know if the source is <code>Meta+Shift+=</code> on IT layout or <code>Meta+Shift+8</code> on US layout.</p>\n<h3>Just Ask</h3>\n<p>The application can infere the keyboard layout using language and location of the browser. Then the Normalization function for such layout is used for catching shortcuts unambiguosly.</p>\n<h3>Recovering Numbers</h3>\n<p>Shortcuts with number keys plus modifiers are not <em>layout-safe</em>.\nHowever, the number keys position on the physical layout should be the same for most of Latin script layouts <a href=\"#latinscript\">[6]</a>.\nUsing the <code>code</code> property of <code>keydown</code> event <a href=\"#keycode\">[5]</a>, should be possible to check for numeric keys without ambiguity,\nas the <code>code</code> property returns the keycode before keymapping is applied.</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">let</span> shortcutHandler = (<span class=\"hljs-keyword\">event</span>) => {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">event</span>.code === <span class=\"hljs-string\">'Digit2'</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.metaKey === <span class=\"hljs-literal\">true</span> &#x26;&#x26; <span class=\"hljs-keyword\">event</span>.shiftKey) {\n        <span class=\"hljs-comment\">// This also catches \"Meta+Shift+2\" on Latin Script based layouts</span>\n        console.log(<span class=\"hljs-string\">'\"Meta+Shift+2\" pressed'</span>)\n    }\n}\n</code></pre>\n<h3>Further readings</h3>\n<ul>\n<li>Internationalize your keyboard controls by Julien Wajsberg, Mozilla Hacks, <a href=\"https://hacks.mozilla.org/2017/03/internationalize-your-keyboard-controls/\" target=\"_blank\"><a href=\"https://hacks.mozilla.org/2017/03/internationalize-your-keyboard-controls/\">https://hacks.mozilla.org/2017/03/internationalize-your-keyboard-controls/</a></a></li>\n<li>Can I Use KeyboardEvent.key, Can I Use, <a target=\"_blank\" href=\"https://caniuse.com/#feat=keyboardevent-key\"><a href=\"https://caniuse.com/#feat=keyboardevent-key\">https://caniuse.com/#feat=keyboardevent-key</a></a></li>\n<li>Can I Use KeyboardEvent.code, Can I Use, <a target=\"_blank\" href=\"https://caniuse.com/#feat=keyboardevent-code\"><a href=\"https://caniuse.com/#feat=keyboardevent-code\">https://caniuse.com/#feat=keyboardevent-code</a></a></li>\n</ul>\n<h3>References</h3>\n<ol>\n<li>Keypress Event Types - DOM 3 Level Specifications, W3C, <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#events-keyboard-types\" target=\"_blank\" id=\"keypress\"><a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents\">https://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents</a></a></li>\n<li>Key Mapping, W3C, <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#key-mapping\" target=\"_blank\" id=\"keymapping\"><a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#key-mapping\">https://www.w3.org/TR/DOM-Level-3-Events/#key-mapping</a></a></li>\n<li><code>key</code> Property of KeyboardEvent, W3C, <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#key-algorithm\" target=\"_blank\" id=\"keyproperty\"><a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#key-algorithm\">https://www.w3.org/TR/DOM-Level-3-Events/#key-algorithm</a></a></li>\n<li>Modifier Key, Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Modifier_key\" target=\"_blank\" id=\"modifier\"><a href=\"https://en.wikipedia.org/wiki/Modifier_key\">https://en.wikipedia.org/wiki/Modifier_key</a></a></li>\n<li>Key Codes, W3C, <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#keys-codevalues\" target=\"_blank\" id=\"keycode\"><a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#keys-codevalues\">https://www.w3.org/TR/DOM-Level-3-Events/#keys-codevalues</a></a></li>\n<li>QWERTY-based layouts for Latin script, Keyboard Layout, Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Keyboard_layout#QWERTY-based_layouts_for_Latin_script\" target=\"_blank\" id=\"latinscript\"><a href=\"https://en.wikipedia.org/wiki/Keyboard_layout#QWERTY-based_layouts_for_Latin_script\">https://en.wikipedia.org/wiki/Keyboard_layout#QWERTY-based_layouts_for_Latin_script</a></a></li>\n</ol>\n<p><em>— 22/05/2017</em></p>"}},"__N_SSG":true}