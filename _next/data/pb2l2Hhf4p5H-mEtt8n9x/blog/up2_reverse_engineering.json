{"pageProps":{"post":{"slug":"up2_reverse_engineering","title":"UP2 Reverse Engineering","description":"Jawbone UP2 vibration hack","date":"2015-09-19T00:00:01.000Z","coverImage":"/images/up2_band.png","coverTitle":"UP2 Reverse Engineering","coverCaption":"Charging my new UP2","coverDark":true,"content":"<p><strong>July 2018 UPDATE:</strong> I’ve released the source code of this project on github.</br>\nFind out more here: <a href=\"https://github.com/cybercase/up2_hacking\">https://github.com/cybercase/up2_hacking</a></p>\n<h3>Having fun with Jawbone UP2</h3>\n<p>A few months after releasing <a href=\"../up24_notifications\">UpNotifications for UP24</a>\nI received a lot of emails asking to add support for the new <strong>Jawbone UP2</strong>.</p>\n<p>As soon as Jawbone made the UP2 available outside the US I placed my order,\nand after receiving the new band, without thinking too much I started tuning the UpNotifications\nsource code to include the UP2 among supported devices just to see if the same hack used for UP24 was working also on this band…</p>\n<blockquote>\n<p>Unfortunately, it was not.</p>\n</blockquote>\n<p>I didn’t give up, and following the same steps of my own <a href=\"../up24_reverse_engineering\">UP24 Hacking</a> blogpost,\nI opened Android Studio, turned on the debugger, started intercepting calls to the android BLE API and see what has changed with respect to UP24…</p>\n<p>The bluetooth packets I was reading were completely different from the UP24 packets,\nso I thought that maybe it was just a matter of replacing the old UP24’s pairing command with the new UP2’s one. And so I did.</p>\n<p>I soon found out that the same trick of <em>sending a pairing command to make the band vibrate</em> was not working because\nthe new UP2 knows if it has been already paired with a phone, and in that case it does not vibrate on pairing.</p>\n<p>While the UP24 <strong>allowed anyone</strong> to make vibrate your band without your permission just by sending a pairing command,\nwith the UP2 <strong>Jawbone has fixed this issue</strong>. Though this is a good news for all UP2 owners, this meant that I had to\nfind another way to trigger the vibration.</p>\n<blockquote>\n<p>I needed to go deeper.</p>\n</blockquote>\n<p>I struggled to understand how the communication protocol has changed, and see if I could find another command to exploit.\nBut just looking at the stream of bluetooth packets wasn’t enough…</p>\n<p>so I though of disassembling the app and inspecting its <code>.smali</code> source code using <a href=\"http://ibotpeaches.github.io/Apktool/\">apktool</a>\nto search for anything that could be useful.</p>\n<p>After going through the sources for a while I noticed a <code>log</code> method used all over the app, probably for debugging purposes,\nthat was disabled just by a simple flag check.</p>\n<p>In a file called <code>JBLog.smali</code>, I changed the following lines</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-deletion\">-    if-nez v0, :cond_0</span>\n<span class=\"hljs-addition\">+    if-eqz v0, :cond_0</span>\n</code></pre>\n<p>then reassembled the app and installed into my phone.</p>\n<blockquote>\n<p>I started getting a lot of debug information placed there right from UP developers :)</p>\n</blockquote>\n<p>I immediately found out that the communication protocol was much more sophisticated than the one used for UP24.</p>\n<p>Log messages like this</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-number\">8257</span>-<span class=\"hljs-number\">8288</span>/com<span class=\"hljs-selector-class\">.jawbone</span><span class=\"hljs-selector-class\">.upopen</span> <span class=\"hljs-selector-tag\">I</span>/UPOPEN﹕ StreamService >>> writeOutputStream > KeyExchangeRequest >\n    f >> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > <span class=\"hljs-number\">0</span>x03\n    g >> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > <span class=\"hljs-number\">0</span>x00\n    h >> (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > <span class=\"hljs-number\">0</span>xd3\n    <span class=\"hljs-selector-tag\">i</span> >> (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > <span class=\"hljs-number\">0</span>x10\n    d >> (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > <span class=\"hljs-number\">7</span>FA19B1353FC584CAEF3D4214C74A365\n</code></pre>\n<p>and</p>\n<pre><code class=\"hljs language-bash\">8257-7505/com.jawbone.upopen D/SecuredStream﹕ generateSeed > 271372323671BDEE846276EF48B53F75\n8257-7505/com.jawbone.upopen D/SecuredStream﹕ 8200CD05803A090000 xor D4CB772B8B9D389527 = 56CBBA2E0BA7319527\n</code></pre>\n<p>and</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-number\">8257</span>-<span class=\"hljs-number\">7505</span>/com<span class=\"hljs-selector-class\">.jawbone</span><span class=\"hljs-selector-class\">.upopen</span> <span class=\"hljs-selector-tag\">I</span>/UPOPEN﹕ StreamService >>> writeOutputStream > SecureChannelRequest >\n    f >> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > <span class=\"hljs-number\">0</span>x06\n    g >> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > <span class=\"hljs-number\">0</span>x00\n    h >> (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > <span class=\"hljs-number\">0</span>xd0\n    <span class=\"hljs-selector-tag\">i</span> >> (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > <span class=\"hljs-number\">0</span>x10\n    c >> (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > F9FC5162DC8B609B6F891BC88648A49A\n    d >> (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">0</span>) > null\n</code></pre>\n<p>were suggesting that the protocol was relying on some kind of encryption to communicate over a secure channel, using a shared encryption key exchanged at the time of pairing.</p>\n<blockquote>\n<p>I needed more, so I thought of using a decompiler.</p>\n</blockquote>\n<p>I tried some like <a href=\"https://bitbucket.org/mstrobel/procyon/\">Procyon</a>, <a href=\"http://www.benf.org/other/cfr/\">CFR</a> to get as much information as possible. With the help of a great tool called <a href=\"https://github.com/Konloch/bytecode-viewer\">BytecodeViewer</a>, I stared to follow the code paths, drawing diagrams, understand the app flow and structures…</p>\n<p>Eventually I reproduced all the steps needed to pair and setup an encrypted communication channel with the UP2 and send the vibration command I needed :)</p>\n<iframe class=\"line-11-m line-17-d\" src=\"//www.youtube.com/embed/uwsyjyM5GJU\" frameborder=\"0\" allowfullscreen></iframe>\n<blockquote>\n<p>Victory! … almost.</p>\n</blockquote>\n<p>As I came back on my initial goal of integrating UP2 support into UpNotifications, I realized that it would be very hard to achieve any kind of <em>user friendly</em> experience.</p>\n<p>The first problem comes from the fact that the encryption key is kept secret into the original UP application, and the only way to retrieve such key is to have a <em>rooted</em> phone.</p>\n<p>The second crucial problem is that, even if it was possible to get the encryption key easily, UP2 supports only one bluetooth connection at time.\nThis means that an <em>UpNotifications for UP2</em> would not work while the band is connected to the original UP application.</p>\n<p>And since there’s no way (without root permission) to control when the UP app runs or communicates with the band, <strong>UpNotifications for UP2 would be incompatible with the official UP app</strong>.</p>\n<blockquote>\n<p>I still haven’t decided whether write an <em>UpNotifications for UP2</em> or not…</p>\n</blockquote>\n<p><del>So, for the time being, I’m not releasing the source code of the “test” app I wrote</del> (moreover, currently the code is quite a mess).</p>\n<p>Also, I want to be sure of the legal consequences of releasing any protocol specs…</p>\n<p>Unlike the old UP24, Jawbone is using this protocol on devices like UP4 for <a href=\"https://jawbone.com/blog/introducing-up4/\">contactless payments</a>, so this time they could be much more interested in keeping the protocol as much secret as possible to avoid security issues.</p>\n<p><em>— 19/09/2015</em></p>"}},"__N_SSG":true}