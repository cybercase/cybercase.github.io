{"pageProps":{"post":{"slug":"inspiration_code","title":"Inspiration Code","description":"Code I wrote after reading a book","date":"2011-12-19T00:00:01.000Z","content":"<h1>Inspiration Code</h1>\n<p>A couple of week ago I run into Modern C++ Design, a book from Andrei Alexandrescu.\nI read it all the way in just a few days. That was so fascinating! This book shows\nyou the unknown and magic power of template metaprogramming… a kind of <em>avada kedavra</em> of C++.</p>\n<p>I’ve got uncertain reviews from my colleagues about this book… But my opinion is definitely a ten out of ten.</p>\n<p>But now, let’s get to the topic! Just a few day ago, I started writing some code for one of my so-called “funprojects”. A snippet of code contained in thread.h file to wraps pthreads functions with a Thread class. After few attempts I decided that my Thread class should be able to execute everything that is a callable in C++.</p>\n<p>From Modern C++ Design, here is the list of entities that support operator <code>()</code>.</p>\n<ul>\n<li>C-like functions</li>\n<li>C-like pointers to functions</li>\n<li>References to functions</li>\n<li>Functors (object that defines operator() )</li>\n</ul>\n<p>The result of applying operator <code>.*</code> or operator <code>->*</code> having a pointer to a member function in the right-hand side of the expression.\nThe behavior that I was trying to achieve for any of them was</p>\n<p><code>RETURN_TYPE result = Thread::run(some_callable, arg1, arg2, ...);</code></p>\n<p>And this is what I’ve got in the end</p>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-comment\">// main.cpp</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"thread.h\"</span></span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">myfun</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span>\n{\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"myfun received: \"</span> &#x3C;&#x3C; i &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> i*<span class=\"hljs-number\">2</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">myclass</span>\n{</span>\npublic:\n\n    myclass(<span class=\"hljs-type\">int</span> i) : i(i) {}\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mymember</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n    {\n        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"mymember received: \"</span> &#x3C;&#x3C; k &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n        <span class=\"hljs-keyword\">return</span> i*<span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-type\">int</span> i;\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">operator</span><span class=\"hljs-params\">()</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> j)</span>\n    {\n        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cerr</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"operator received: \"</span> &#x3C;&#x3C; j &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n        <span class=\"hljs-keyword\">return</span> i*<span class=\"hljs-number\">2</span>;\n    }\n\n};\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span>** argv)</span>\n{\n\n    <span class=\"hljs-type\">int</span> (*mypt)(<span class=\"hljs-type\">int</span>) = &#x26;myfun;\n    <span class=\"hljs-type\">int</span> (&#x26;myref)(<span class=\"hljs-type\">int</span>) = myfun;\n    myclass <span class=\"hljs-title function_\">mc</span><span class=\"hljs-params\">(<span class=\"hljs-number\">5</span>)</span>;\n\n    <span class=\"hljs-comment\">// Call to function</span>\n    Result&#x3C;<span class=\"hljs-type\">int</span>> r0 = Thread::run(myfun, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"retval:\"</span> &#x3C;&#x3C; r0.value() &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-comment\">// Call to function pointer</span>\n    Result&#x3C;<span class=\"hljs-type\">int</span>> r1 = Thread::run(mypt, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"retval:\"</span> &#x3C;&#x3C; r1.value() &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-comment\">// Call to function reference</span>\n    Result&#x3C;<span class=\"hljs-type\">int</span>> r2 = Thread::run(myref, <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"retval:\"</span> &#x3C;&#x3C; r2.value() &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-comment\">// Call to functor</span>\n    Result&#x3C;<span class=\"hljs-type\">int</span>> r3 = Thread::run&#x3C;<span class=\"hljs-type\">int</span>>(mc, <span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"retval:\"</span> &#x3C;&#x3C; r3.value() &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-comment\">// Call to member function pointer</span>\n    Result&#x3C;<span class=\"hljs-type\">int</span>> r4 = Thread::run(&#x26;mc, &#x26;myclass::mymember, <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"retval:\"</span> &#x3C;&#x3C; r4.value() &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>In the next post I’m going to show some details of the code in <code>thread.h</code>.</p>\n<p>Want to compile and run this code?!</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> git://github.com/cybercase/funproject.git\n<span class=\"hljs-built_in\">cd</span> funproject/other\ng++ concurrent.cpp -o concurrent -Wall <span class=\"hljs-comment\"># add -lpthread if you are on a linux system</span>\n</code></pre>\n<p><em>— 19/12/2011</em></p>"}},"__N_SSG":true}