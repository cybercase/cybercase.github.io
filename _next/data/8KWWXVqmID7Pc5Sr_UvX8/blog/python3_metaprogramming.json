{"pageProps":{"post":{"slug":"python3_metaprogramming","title":"Python 3 Metaprogramming","description":"Experimenting with Python 3 Metaprogramming","date":"2013-05-22T00:00:01.000Z","content":"<h1>Python 3 Metaprogramming</h1>\n<p>How can you import XML files into Python 3?\nAnd why you would?\n… This blogpost doesn’t answer this last question, but it’s definetly going to answer the first one :)</p>\n<p>Everything I’m writing is taken from this talk from David Beazley: <a href=\"https://www.youtube.com/watch?v=sPiWg5jSoZI\">youtube video</a>.\nConsider this post as a very little summary of its contents.</p>\n<p>Let’s start with the requirements:\nPython 3.3\n… that’s all!</p>\n<p>And let’s see what you’re getting:</p>\n<p>If you define a file structures.xml like this</p>\n<pre><code class=\"hljs language-php-template\"><span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">structures</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">structure</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Stock\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">field</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"SizedString\"</span> <span class=\"hljs-attr\">maxlen</span>=<span class=\"hljs-string\">\"4\"</span>></span>name<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">field</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">field</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"PosInteger\"</span>></span>shares<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">field</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">field</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"PosFloat\"</span>></span>price<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">field</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">structure</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">structures</span>></span>\n</span></code></pre>\n<p>At the end of this blogpost you will get this</p>\n<pre><code class=\"hljs language-python-repl\"><span class=\"hljs-meta prompt_\">>>></span> <span class=\"python\"><span class=\"hljs-keyword\">from</span> structures <span class=\"hljs-keyword\">import</span> *</span>\n<span class=\"hljs-meta prompt_\">>>></span> <span class=\"python\">s = Stock(<span class=\"hljs-string\">\"GOOG\"</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">99.0</span>)</span>\n<span class=\"hljs-meta prompt_\">>>></span> <span class=\"python\"><span class=\"hljs-comment\"># DEFAULT INITIALIZER</span></span>\n<span class=\"hljs-meta prompt_\">>>></span> <span class=\"python\">s.name, s.shares, s.price</span>\n('GOOG', 1, 1.0)\n\n<span class=\"hljs-meta prompt_\">>>></span> <span class=\"python\"><span class=\"hljs-comment\"># TYPE CHECKING</span></span>\n<span class=\"hljs-meta prompt_\">>>></span> <span class=\"python\">s.name = <span class=\"hljs-number\">100</span></span>\nTypeError: Expected &#x3C;class 'str'>\n\n<span class=\"hljs-meta prompt_\">>>></span> <span class=\"python\"><span class=\"hljs-comment\"># CONSTRAINT CHECKING</span></span>\n<span class=\"hljs-meta prompt_\">>>></span> <span class=\"python\">s.name = <span class=\"hljs-string\">\"GOOOOOOG\"</span></span>\nValueError: Too big\n</code></pre>\n<p>So, if this just aroused your curiosity, go on reading ;)</p>\n<p>The first step is to have a look at descriptors.\nDescriptors is just how properties are implemented in python [see this link]. In this example, we use them as classes to perform checks on values assignment.\nSo, let’s take as example a descriptor that performs a check such that only values of type str within a certain length are allowed.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StringDescriptor</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, maxlen</span>):\n        self.name = name\n        self.maxlen = maxlen\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__set__</span>(<span class=\"hljs-params\">self, instance, value</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(value) != <span class=\"hljs-built_in\">str</span>:\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">\"Wrong type, expected: %s\"</span> % <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">str</span>))\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">len</span>(value) > self.maxlen:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">\"String too long\"</span>)\n        instance.__dict__[self.name] = value\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__get__</span>(<span class=\"hljs-params\">self, instance, cls</span>):\n        <span class=\"hljs-comment\"># Actually performs the default action. Just don't define this</span>\n        <span class=\"hljs-comment\"># method to get the default behavior.</span>\n        <span class=\"hljs-keyword\">return</span> instance.__dict__[self.name]\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Stock</span>:\n    name = StringDescriptor(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name</span>):\n        self.name = name\n\n<span class=\"hljs-meta\">>>> </span>st = Stock(<span class=\"hljs-string\">\"GOOG\"</span>)\n<span class=\"hljs-meta\">>>> </span>st.name = <span class=\"hljs-string\">\"GOOOOOG\"</span>\nTraceback (most recent call last):\n  File <span class=\"hljs-string\">\"&#x3C;stdin>\"</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &#x3C;module>\n  File <span class=\"hljs-string\">\"post.py\"</span>, line <span class=\"hljs-number\">10</span>, <span class=\"hljs-keyword\">in</span> __set__\n    <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">\"String too long\"</span>)\nValueError: String too long\n\n<span class=\"hljs-meta\">>>> </span>st.name = <span class=\"hljs-number\">1</span>\n\nTraceback (most recent call last):\n  File <span class=\"hljs-string\">\"&#x3C;stdin>\"</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &#x3C;module>\n  File <span class=\"hljs-string\">\"post.py\"</span>, line <span class=\"hljs-number\">8</span>, <span class=\"hljs-keyword\">in</span> __set__\n    <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">\"Wrong type, expected: %s\"</span> % <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">str</span>))\nTypeError: Wrong <span class=\"hljs-built_in\">type</span>, expected: &#x3C;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'str'</span>>\n\nTo handle different descriptors, David uses a descriptors hierarchy like the following:\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Descriptor</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name=<span class=\"hljs-literal\">None</span></span>):\n        self.name = name\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__set__</span>(<span class=\"hljs-params\">self, instance, value</span>):\n        instance.__dict__[self.name] = value\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__delete__</span>(<span class=\"hljs-params\">self, instance</span>):\n        <span class=\"hljs-keyword\">raise</span> AttributeError(<span class=\"hljs-string\">\"Can't delete\"</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Typed</span>(<span class=\"hljs-title class_ inherited__\">Descriptor</span>):\n    ty = <span class=\"hljs-built_in\">object</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__set__</span>(<span class=\"hljs-params\">self, instance, value</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(value, self.ty):\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">'Expected %s'</span> % self.ty)\n        <span class=\"hljs-built_in\">super</span>().__set__(instance, value)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Sized</span>(<span class=\"hljs-title class_ inherited__\">Descriptor</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, *args, maxlen, **kwargs</span>):\n        self.maxlen = maxlen\n        <span class=\"hljs-built_in\">super</span>().__init__(*args, **kwargs)\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__set__</span>(<span class=\"hljs-params\">self, instance, value</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(value) > self.maxlen:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">'Too big'</span>)\n        <span class=\"hljs-built_in\">super</span>().__set__(instance, value)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-title class_ inherited__\">Typed</span>):\n    ty = <span class=\"hljs-built_in\">str</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Integer</span>(<span class=\"hljs-title class_ inherited__\">Typed</span>):\n    ty = <span class=\"hljs-built_in\">int</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Float</span>(<span class=\"hljs-title class_ inherited__\">Typed</span>):\n    ty = <span class=\"hljs-built_in\">float</span>\n</code></pre>\n<p>Then merges the descriptors using multiple inheritance… But pay attention at MRO! (method resolution order)</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Positive</span>(Descriptor):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__set__</span>(<span class=\"hljs-params\"><span class=\"hljs-variable language_\">self</span>, instance, value</span>):\n        <span class=\"hljs-keyword\">if</span> value &#x3C; <span class=\"hljs-number\">0</span>:\n            raise ValueError(<span class=\"hljs-string\">'Expected >= 0'</span>)\n        <span class=\"hljs-variable language_\">super</span>().__set__(instance, value)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PosInteger</span>(Integer, Positive):\n    pass\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PosFloat</span>(Float, Positive):\n    pass\n</code></pre>\n<p>Finally to get rid of the repeated variable’s name in the descriptor constructor, David use a metaclass to inject the name into the descriptor:</p>\n<pre><code class=\"hljs language-ini\">class StructMeta(type):\n    def __new__(cls, name, bases, clsdict):\n        <span class=\"hljs-attr\">fields</span> = [ key for key, val in clsdict.items()\n                if isinstance(val, Descriptor) ]\n        for name in fields:\n            clsdict<span class=\"hljs-section\">[name]</span>.<span class=\"hljs-attr\">name</span> = name\n        <span class=\"hljs-attr\">clsobj</span> = super().__new__(cls, name, bases, clsdict)\n        return clsobj\n</code></pre>\n<p>The Stock class definition now becomes</p>\n<pre><code class=\"hljs language-ini\">class Stock(<span class=\"hljs-attr\">metaclass</span>=StructMeta):\n    <span class=\"hljs-attr\">name</span> = SizedString(maxlen=<span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-attr\">shares</span> = PosInteger()\n    <span class=\"hljs-attr\">price</span> = PosFloat()\n\n    def __init__(self, name, shares, price):\n        <span class=\"hljs-attr\">self.name</span> = name\n        <span class=\"hljs-attr\">self.shares</span> = shares\n        <span class=\"hljs-attr\">self.price</span> = price\n</code></pre>\n<p>There is still another “problem” that David try to solve: the code repetition inside the <strong>init</strong> method.\nTo address this problem, he changes the previous metaclass as follows.\nfrom collections import OrderedDict</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StructMeta</span>(<span class=\"hljs-title class_ inherited__\">type</span>):\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__prepare__</span>(<span class=\"hljs-params\">cls, name, bases=<span class=\"hljs-literal\">None</span></span>):\n        <span class=\"hljs-comment\"># this method returns the dictionary used by the class instance.</span>\n        <span class=\"hljs-comment\"># To generate a signature the parameters order is crucial, so an</span>\n        <span class=\"hljs-comment\"># OrderedDict is used</span>\n        <span class=\"hljs-keyword\">return</span> OrderedDict()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__new__</span>(<span class=\"hljs-params\">cls, name, bases, clsdict</span>):\n        fields = [ key <span class=\"hljs-keyword\">for</span> key, val <span class=\"hljs-keyword\">in</span> clsdict.items()\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(val, Descriptor) ]\n        <span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> fields:\n            clsdict[name].name = name\n\n        <span class=\"hljs-comment\"># the following block generates the code for __init__ method</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(fields):\n            init_code = <span class=\"hljs-string\">'def __init__(self, %s):\\n'</span> % \\\n                        <span class=\"hljs-string\">', '</span>.join(fields)\n            <span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> fields:\n                init_code += <span class=\"hljs-string\">'    self.%s = %s\\n'</span> % (name, name)\n            <span class=\"hljs-built_in\">exec</span>(init_code, <span class=\"hljs-built_in\">globals</span>(), clsdict)\n\n        clsobj = <span class=\"hljs-built_in\">super</span>().__new__(cls, name, bases, <span class=\"hljs-built_in\">dict</span>(clsdict))\n        <span class=\"hljs-keyword\">return</span> clsobj\n</code></pre>\n<p>And the Stock class becomes</p>\n<pre><code class=\"hljs language-ini\">class Stock(<span class=\"hljs-attr\">metaclass</span>=StructMeta):\n    <span class=\"hljs-attr\">name</span> = SizedString(maxlen=<span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-attr\">shares</span> = PosInteger()\n    <span class=\"hljs-attr\">price</span> = PosFloat()\n</code></pre>\n<p>At this point it’s convenient introduce a Structure base class:</p>\n<pre><code class=\"hljs language-ini\">class Structure(<span class=\"hljs-attr\">metaclass</span>=StructMeta):\n    pass\n\nclass Stock(Structure):\n    <span class=\"hljs-attr\">name</span> = SizedString(maxlen=<span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-attr\">shares</span> = PosInteger()\n    <span class=\"hljs-attr\">price</span> = PosFloat()\n</code></pre>\n<p>And finally we get to the XML part :)\nThe first goal is to generate the python code from the XML file. To achieve this the David use these functions:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">from</span> xml<span class=\"hljs-selector-class\">.etree</span><span class=\"hljs-selector-class\">.ElementTree</span> import parse\ndef _xml_to_code(filename):\n    doc = <span class=\"hljs-built_in\">parse</span>(filename)\n    code = <span class=\"hljs-string\">''</span>\n    for st in doc.<span class=\"hljs-built_in\">findall</span>(<span class=\"hljs-string\">'structure'</span>):\n        code += <span class=\"hljs-built_in\">_xml_struct_code</span>(st)\n    return code\n\ndef <span class=\"hljs-built_in\">_xml_struct_code</span>(st):\n    stname = st.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-string\">'name'</span>)\n    code = <span class=\"hljs-string\">'class %s(Structure):\\n'</span> % stname\n    for field in st.<span class=\"hljs-built_in\">findall</span>(<span class=\"hljs-string\">'field'</span>):\n        name = field.text.<span class=\"hljs-built_in\">strip</span>()\n        dtype = field.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-string\">'type'</span>)\n        kwargs = <span class=\"hljs-string\">', '</span>.<span class=\"hljs-built_in\">join</span>(<span class=\"hljs-string\">'%s=%s'</span> % (key, val)\n                            for key, val in field.<span class=\"hljs-built_in\">items</span>()\n                            if key != <span class=\"hljs-string\">'type'</span>)\n        code += <span class=\"hljs-string\">'    %s = %s(%s)\\n'</span> % (name, dtype, kwargs)\n    return code\n</code></pre>\n<p>And the result of parsing the structure.xml file (defined at the beginning of the blogpost) is:</p>\n<pre><code class=\"hljs language-ini\">>>> print(_xml_to_code(\"structures.xml\"))\nclass Stock(Structure):\n    <span class=\"hljs-attr\">name</span> = SizedString(maxlen=<span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-attr\">shares</span> = PosInteger()\n    <span class=\"hljs-attr\">price</span> = PosFloat()\n</code></pre>\n<p>The final step consists in hooking to the python import system. Full details about the new Import Hooks feature of Python3.3 are found at [PEP-302].\nWe begin defining a new importer class to append at sys.meta_path</p>\n<pre><code class=\"hljs language-lua\">import <span class=\"hljs-built_in\">os</span>\nclass StructImporter:\n    def __init__(<span class=\"hljs-built_in\">self</span>, <span class=\"hljs-built_in\">path</span>):\n        <span class=\"hljs-built_in\">self</span>._path = <span class=\"hljs-built_in\">path</span>\n    def find_module(<span class=\"hljs-built_in\">self</span>, fullname, <span class=\"hljs-built_in\">path</span>=None):\n        name = fullname.rpartition(<span class=\"hljs-string\">'.'</span>)[<span class=\"hljs-number\">-1</span>]\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">path</span> is None:\n            <span class=\"hljs-built_in\">path</span> = <span class=\"hljs-built_in\">self</span>._path\n        <span class=\"hljs-keyword\">for</span> dn <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">path</span>:\n            filename = <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.join(dn, name+<span class=\"hljs-string\">'.xml'</span>)\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.exists(filename):\n                <span class=\"hljs-keyword\">return</span> StructXMLLoader(filename)\n        <span class=\"hljs-keyword\">return</span> None\n</code></pre>\n<p>And an XML module loader</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> imp\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StructXMLLoader</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, filename</span>):\n        self._filename = filename\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">load_module</span>(<span class=\"hljs-params\">self, fullname</span>):\n        mod = sys.modules.setdefault(fullname,\n                                    imp.new_module(fullname))\n        mod.__file__ = self._filename\n        mod.__loader__ = self\n        code = _xml_to_code(self._filename)\n        <span class=\"hljs-comment\"># actually this is bad. I should use mod.__dict__</span>\n        <span class=\"hljs-comment\"># instead of globals(), and add an import statement into</span>\n        <span class=\"hljs-comment\"># \"code\" to load Structure and the other classes.</span>\n        <span class=\"hljs-built_in\">exec</span>(code, <span class=\"hljs-built_in\">globals</span>(), mod.__dict__)\n        <span class=\"hljs-keyword\">return</span> mod\n\n<span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">install_importer</span>(<span class=\"hljs-params\">path=sys.path</span>):\n    sys.meta_path.append(StructImporter(path))\n\ninstall_importer()\n\nAnd <span class=\"hljs-keyword\">finally</span> here we are:\nPython3<span class=\"hljs-number\">.3</span> -i xmlimport.py\n<span class=\"hljs-meta\">>>> </span><span class=\"hljs-keyword\">from</span> structures <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-meta\">>>> </span>s = Stock(<span class=\"hljs-string\">\"GOOG\"</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1.0</span>)\n</code></pre>\n<p>You can find the final version of the xmlimporter.py and structures.xml under the folder</p>\n<p><code>python_metaprogramming</code> in my git repository at:</p>\n<p><code>git://github.com/cybercase/funproject.git</code></p>\n<p>If you got 3 hours to spend, and a lot of love for this metaprogramming stuff, I really suggest to watch the entire video from David Beazley. Also, I apologize in advance for any error in this blogpost.</p>\n<p><em>— 22/05/2013</em></p>"}},"__N_SSG":true}