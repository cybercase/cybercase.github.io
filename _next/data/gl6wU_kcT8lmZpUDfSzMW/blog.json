{"pageProps":{"allPosts":[{"slug":"web-minidisc","title":"The Web MiniDisc Application - Use your old NetMD device in the browser","description":"Get control of your MiniDisc device thanks to WebUSB and WASM","date":"2020-03-26T05:35:07.322Z","coverImage":"/images/minidisc.jpg","coverTitle":"The Web MiniDisc App","coverSubtitle":"Bringing back to life the MiniDisc with WebUSB and WASM","coverDark":true,"content":"\nIf you've never heard of the MiniDisc don't worry, you're not alone.\n\nIf you're curious, you can catch up by reading the [Wikipedia page](https://en.wikipedia.org/wiki/MiniDisc),\nor the old community portal [minidisc.org](http://www.minidisc.org/), or interact with the reddit community of [/r/minidisc](https://reddit.com/r/minidisc).\n\nIf you're not, long story short, it's a dead music format released by Sony at the beginning of the '90s, that was slowly killed\nby the popularity of the many MP3 players that started coming out in the early 2000s.\n\nSome of the last MiniDisc players, branded as _NetMD_ units, were equipped with a USB port that allowed for recording music onto the device by using the infamously SonicStage software (Windows only, of course).\nWhen Sony abandoned the MiniDisc, that software was left unmaintained and, nowadays, it can't run outside virtual machines or without using dangerously unsigned drivers.\n\nLuckily the OSS community managed to completely reverse engineer the NetMD protocol and, before the death of the MiniDisc, the [linux-minidisc](https://wiki.physik.fu-berlin.de/linux-minidisc/doku.php) project was released.\n\nA few of weeks ago, just before the infamously Coronavirus lockdown here in Italy, I've been lucky enough to find my old [MZ-N710](https://www.minidisc.org/part_Sony_MZ-N710.html) in my parents' basement.\nDetermined to make it work on my Macbook, I brought it home and successfully managed to compile and run the linux-minidisc CLI.\n\n## Porting the MiniDisc to Web\n\nThe process for uploading the music via the CLI was comprised of 2 steps:\n\n1. Convert your music\n\n- Use `ffmpeg` <sup>[[1]](#ffmpeg)</sup> to create a 16bit 44100Hz pcm wav file (SP quality)\n- Use `atrac3denc` <sup>[[2]](#atracdenc)</sup> to create a 132/66 Kbit ATRAC3 file (LP2/LP4 quality)\n\n2. Use the CLI to send the converted music to the device\n\nNot the most _user friendly_ process for those who're not fancy to type commands in a terminal.\n\nSo, after pondering for a while, I realized these steps could have been encapsulated in a _no-install-required_\nprogressive web app, for a considerable step up in the ease of the process.\n\nI would just use:\n\n- **WebUSB**<sup>[[8]](#webusb)</sup> to replace the CLI for communicating with the NetMD device\n- **emscripten**<sup>[[9]](#emscripten)</sup> to bring `ffmpeg` and `atracdenc` into the browser\n- **React**<sup>[[10]](#reacjs)</sup> to create a simple UI\n\n### 1. Writing a library\n\nI started by porting the code from linux-minidisc to a new JS library that I've now published on npm, called `netmd-js`<sup>[[3]](#netmdjs)</sup>.\n\nThis library implements the NetMD protocol and takes care of the USB communication with the device.\nIt will also allow other devs to write their own app, should mine not suit their needs.\n\nIt runs either in `nodejs` and in every browser supporting the WebUSB standard, and uses _Worker Threads_<sup>[[4]](#workerthreads)</sup> or\n_Web Workers_<sup>[[5]](#webworkers)</sup> to speed up the\nmusic encryption step required by the protocol. The encryption has been implemented on top of _CryptoJS_<sup>[[6]](#cryptojs)</sup>.\n\n### 2. Using emscripten\n\nI was lucky enough to find a project called `ffmpeg.js`<sup>[[7]](#ffmpegjs)</sup> that already ported ffmpeg to WASM.\nSo, the only thing left to do was to configure it properly and recompile, just to trim down the binary size.\nA full tutorial is available in the GitHub page of `ffmpeg.js`.\n\nThen, I've followed a similar process to cross compile the `atracdenc` encoder and eventually write a simple JS wrapper around it.\n\n### 3. The Web MiniDisc Application\n\nAfter gathering all the bricks together, I've shifted my focus to design the app's user interface and experience.\n\n<div class=\"mtop-1-m mtop-1-d line-21-d\" style=\"text-align: center;\">\n    <img src=\"/images/webminidiscapp.png\" alt=\"Web MiniDisc App Wireframe\" style=\"width: 100%;\"/>\n</div>\n\n> _A dead simple user experience_\n\nThen I started off with the classic _create react app + TypeScript_ template, and added _redux_ and _material-ui_ components... a _no-frills_ setup.\n\n## How to use a NetMD device in 2020\n\nA couple of nights later I was ready to record the first demo of the the Web MiniDisc Application.\n\nIt has been exciting to see the app work seamlessly both on my Macbook and on my Android phone without an `if` needed.\n\n<iframe class=\"line-17-d line-11-m\" src=\"//www.youtube.com/embed/Frs8qhw0g9Y\" frameborder=\"0\" allowfullscreen></iframe>\n\n### Public launch\n\nHonestly, there aren't many places to launch a MiniDisc app in 2020 :)<br/>\nIt's a pretty tiny niche.\n\nHowever, I have been lurking for some time in [/r/minidisc](https://www.reddit.com/r/minidisc/) and decided to start from there.\n[The feedback was great](https://www.reddit.com/r/minidisc/comments/fn4acd/web_minidisc_application/), and people even responded with a few bug reports and feature requests.\n\n### Links\n\nIf you're a lucky owner of a NetMD device, you can try the app yourself at\n\n<a href=\"https://stefano.brilli.me/webminidisc/\" target=\"_blank\">https://stefano.brilli.me/webminidisc/</a>\n\nOr, if you just want to browse the code, everything's available on GitHub.\n\n<a href=\"https://github.com/cybercase/webminidisc\" target=\"_blank\">https://github.com/cybercase/webminidisc</a>\n\n### References\n\n1. FFmpeg, <a href=\"https://ffmpeg.org/\" target=\"_blank\" id=\"ffmpeg\">https://ffmpeg.org/</a>\n2. atracdenc, <a href=\"https://github.com/dcherednik/atracdenc\" target=\"_blank\" id=\"atracdenc\">https://github.com/dcherednik/atracdenc</a>\n3. netmd-js, <a href=\"https://github.com/cybercase/netmd-js\" target=\"_blank\" id=\"netmdjs\">https://github.com/cybercase/netmd-js</a>\n4. Worker Threads, <a href=\"https://nodejs.org/api/worker_threads.html\" target=\"_blank\" id=\"workerthreads\">https://nodejs.org/api/worker_threads.html</a>\n5. Web Workers, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" id=\"webworkers\">https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers</a>\n6. CryptoJS, <a href=\"https://code.google.com/archive/p/crypto-js/\" target=\"_blank\" id=\"cryptojs\">https://code.google.com/archive/p/crypto-js/</a>\n7. ffmpeg.js, <a href=\"https://github.com/ffmpegjs/ffmpeg.js\" target=\"_blank\" id=\"ffmpegjs\">https://github.com/ffmpegjs/ffmpeg.js</a>\n8. WebUSB, <a href=\"https://wicg.github.io/webusb/\" target=\"_blank\" id=\"webusb\">https://wicg.github.io/webusb/</a>\n9. emscripten, <a href=\"https://emscripten.org/\" target=\"_blank\" id=\"emscripten\">https://emscripten.org/</a>\n10. React, <a href=\"https://reactjs.org/\" target=\"_blank\" id=\"reacjs\">https://reactjs.org/</a>\n\n_-- 26/03/2020_\n"},{"slug":"mutant-graphql-app-macos","title":"Mutant - a GraphQL Explorer App for macOS","description":"GraphQL API Explorer based on GraphiQL","date":"2017-12-21T00:00:01.000Z","coverImage":"/images/mutant_cover.png","coverSubtitle":"a GraphQL Explorer App for macOS","coverDark":true,"content":"\nI'm happy to announce my first macOS Application:<br/>\n**Mutant: a GraphQL Explorer App for macOS**\n\n**UPDATE: I've abandoned this project and is currently unmaintained.**\n\nIt's a handy tool for GraphQL developers used to jump between\n[Graph*i*QL](https://github.com/graphql/graphiql) and\n[GraphQL-Voyager](https://github.com/APIs-guru/graphql-voyager).\nMutant combines the features of these two great tools in a lightweight macOS app.\n\n~~There's still a lot of work to do, so I'm running a **beta test** to gather some feedback, and if you are a\nGraphQL developer I can't wait to hear from you.~~\n\n~~You can [download here](https://mutant.ams3.digitaloceanspaces.com/Mutant%201.0.0-beta.3.zip) the latest version of the app\nand drop your thoughts to [stefano@brilli.me](mailto:stefano@brilli.me).~~\n\n- _5 Jan 2018: Released 1.0.0-beta.3_</br>\n  Removed reference to outdated swift dylib.\n\n### Zoom and Pan over your GraphQL Schema with Mutant\n\n<iframe class=\"line-11-m line-17-d\" src=\"https://www.youtube.com/embed/zDZAHtU3GrM\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe>\n\n### Compose your GraphQL Query with Autocompletion and Assistant\n\n<iframe class=\"line-11-m line-17-d\" src=\"https://www.youtube.com/embed/ei5ev-9kKKU\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe>\n\n_-- 21/12/2017_\n"},{"slug":"javascript_keyboard_shortcuts_in_the_browser","title":"Keyboard Shortcuts and Layouts in the Browser","description":"Defining layout independent keyboard shortcuts in the browser","date":"2017-05-22T00:00:01.000Z","coverImage":"/images/keyboard.png","coverTitle":"Keyboard Shortcuts and Layouts in the Browser","coverDark":true,"content":"\nCurrent DOM specification provides 2 event types for handling keyboard actions<sup>[[1]](#keypress)</sup>:\n\n- `keydown`\n- `keyup`\n\nThese events match the physical actions of pressing and releasing a key of the keyboard, and have a payload with the\nresult of _keymapping_<sup>[[2]](#keymapping)</sup> by the OS (or any software in between), taking into account current _layout_, modifier and dead keys.\n\nThe result of _keymapping_ is stored in the `key` property of the event according to the _key algorithm_<sup>[[3]](#keyproperty)</sup>.\nThe pressing of a specific key can be caught just by listening for `keydown` and checking the `key` prop. e.g.\n\n    let shortcutHandler = (event) => {\n        // Shortcut: l\n        if (event.key === 'l') {\n            // Simplest case; Facebook use the same shortcut to like items in the feed.\n            console.log('\"l\" is pressed')\n        }\n    }\n\n    document.addEventListener('keydown', shortcutHandler)\n\n## Modifiers\n\nKeyboard shortcuts may require the combination of a character key and one or more modifiers<sup>[[4]](#modifier)</sup>.\nModifiers like `Meta` or `Ctrl` usually don't have the purpose of altering the unicode produced by a key,\nso it's easy to define and catch a shortcut combination using the modifiers props stored in the event payload. e.g.\n\n    let shortcutHandler = (event) => {\n        // Shortcut: Meta+c\n        if (event.key === 'c' && event.metaKey === true) {\n            // The famous \"Copy\" shortcut on macOS\n            console.log('\"Meta+c\" pressed')\n        }\n    }\n\nOn the other hand `Alt` and `Shift` modifiers may alter the unicode produced by a key, leading to issues in shortcut definition and catching. e.g.\n\n    let shortcutHandler = (event) => {\n        // Shortcut: Meta+Shift+s\n        if (event.key === 's' && event.metaKey === true && event.shiftKey) {\n            // The \"Save All\" shortcut\n            console.log('\"Meta+Shift+s\" pressed')\n\n            // WARNING\n            // This won't work becase the \"Shift\" modifier change the unicode\n            // of \"S\" key from \"s\" (lowercase) to \"S\" (uppercase)\n        }\n    }\n\n## Normalization\n\nFixing the previous example is trivial: just replace the lowercase \"s\" with the uppercase \"S\" in the shortcut definition.\nThe new definition considers the effect produced from the `Shift` modifier, making the code work just fine. e.g.\n\n    let shortcutHandler = (event) => {\n        // Shortcut: Meta+Shift+S\n        if (event.key === 'S' && event.metaKey === true && event.shiftKey) {\n            // The Normalized \"Save All\" shortcut\n            console.log('\"Meta+Shift+S\" pressed')\n\n            // This works as expected\n        }\n    }\n\nLet's call **Normalization** the action of replacing of the\ncharacter key in a keyboard shortcut, with the unicode produced from the same character key plus the modifiers in the shortcut.\n\n## Layouts\n\nNormalization falls short when considering multiple layouts; in fact it's layout dependant. e.g.:\n\n- Normalization<sub>US</sub> for `Meta + Shift + 2` is `Meta + Shift + @`\n- Normalization<sub>IT</sub> for `Meta + Shift + 2` is `Meta + Shift + \"`\n- Normalization<sub>FR</sub> for `Meta + Shift + 2` is `Meta + Shift + 2`.\n\nThis limits the Normalization effectiveness to just the shortcuts that use a character key for which its modified unicode char, according to the shortcut modifiers, is the same across every layout.\nLet's call these shortcuts _layout-safe_. e.g.:\n\n- Any lowercase [a-z] letter plus the `Shift` modifier should produce the uppercase version of that letter in every layout.\n\n## Recap\n\nWhen definining shortcuts for the browsers and multiple layouts it's worth considering that:\n\n- Browsers and OS catch shortcuts too; be aware of collisions.\n- Browsers don't provide an API for knowing the current layout.\n- Some key may not be available on some layouts or may require additional modifiers to produce the same character.\n- If the shortcut contains a character key, modifiers may change the unicode emitted by the `keydown` in an unpredictable way.\n\n## Workaround Ideas\n\n### Catch 'Em All\n\nGiven a shortcut, the idea is to collect its Normalization for every layout and listening for all of them.\n\n    let shortcutHandler = (event) => {\n        if ((event.key === '2' && event.metaKey === true && event.shiftKey) ||\n            (event.key === '\"' && event.metaKey === true && event.shiftKey) ||\n            (event.key === '@' && event.metaKey === true && event.shiftKey)) {\n            // This catches the \"Meta+Shift+2\" on US, IT, and FR layouts\n            console.log('\"Meta+Shift+2\" pressed')\n        }\n    }\n\nThe obvious problem is that every shortcut ends up producing a set of Normalized shortcuts, and if the interesection of these sets is not empty it's impossible to choose which shortcut was triggered. e.g.\n\n1. Normalization<sub>[US, IT]</sub> for `Meta+Shift+=` is [`Meta+Shift++`, `Meta+Shift+*`]\n2. Normalization<sub>[US, IT]</sub> for `Meta+Shift+8` is [`Meta+Shift+*`, `Meta+Shift+(`]\n\nClearly `Meta+Shift+*` falls into the intersection, making impossible to know if the source is `Meta+Shift+=` on IT layout or `Meta+Shift+8` on US layout.\n\n### Just Ask\n\nThe application can infere the keyboard layout using language and location of the browser. Then the Normalization function for such layout is used for catching shortcuts unambiguosly.\n\n### Recovering Numbers\n\nShortcuts with number keys plus modifiers are not _layout-safe_.\nHowever, the number keys position on the physical layout should be the same for most of Latin script layouts [[6]](#latinscript).\nUsing the `code` property of `keydown` event [[5]](#keycode), should be possible to check for numeric keys without ambiguity,\nas the `code` property returns the keycode before keymapping is applied.\n\n    let shortcutHandler = (event) => {\n        if (event.code === 'Digit2' && event.metaKey === true && event.shiftKey) {\n            // This also catches \"Meta+Shift+2\" on Latin Script based layouts\n            console.log('\"Meta+Shift+2\" pressed')\n        }\n    }\n\n### Further readings\n\n- Internationalize your keyboard controls by Julien Wajsberg, Mozilla Hacks, <a href=\"https://hacks.mozilla.org/2017/03/internationalize-your-keyboard-controls/\" target=\"_blank\">https://hacks.mozilla.org/2017/03/internationalize-your-keyboard-controls/</a>\n- Can I Use KeyboardEvent.key, Can I Use, <a target=\"_blank\" href=\"https://caniuse.com/#feat=keyboardevent-key\">https://caniuse.com/#feat=keyboardevent-key</a>\n- Can I Use KeyboardEvent.code, Can I Use, <a target=\"_blank\" href=\"https://caniuse.com/#feat=keyboardevent-code\">https://caniuse.com/#feat=keyboardevent-code</a>\n\n### References\n\n1. Keypress Event Types - DOM 3 Level Specifications, W3C, <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#events-keyboard-types\" target=\"_blank\" id=\"keypress\">https://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents</a>\n2. Key Mapping, W3C, <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#key-mapping\" target=\"_blank\" id=\"keymapping\">https://www.w3.org/TR/DOM-Level-3-Events/#key-mapping</a>\n3. `key` Property of KeyboardEvent, W3C, <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#key-algorithm\" target=\"_blank\" id=\"keyproperty\">https://www.w3.org/TR/DOM-Level-3-Events/#key-algorithm</a>\n4. Modifier Key, Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Modifier_key\" target=\"_blank\" id=\"modifier\">https://en.wikipedia.org/wiki/Modifier_key</a>\n5. Key Codes, W3C, <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#keys-codevalues\" target=\"_blank\" id=\"keycode\">https://www.w3.org/TR/DOM-Level-3-Events/#keys-codevalues</a>\n6. QWERTY-based layouts for Latin script, Keyboard Layout, Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Keyboard_layout#QWERTY-based_layouts_for_Latin_script\" target=\"_blank\" id=\"latinscript\">https://en.wikipedia.org/wiki/Keyboard_layout#QWERTY-based_layouts_for_Latin_script</a>\n\n_-- 22/05/2017_\n"},{"slug":"up2_reverse_engineering","title":"UP2 Reverse Engineering","description":"Jawbone UP2 vibration hack","date":"2015-09-19T00:00:01.000Z","coverImage":"/images/up2_band.png","coverTitle":"UP2 Reverse Engineering","coverCaption":"Charging my new UP2","coverDark":true,"content":"\n**July 2018 UPDATE:** I've released the source code of this project on github.</br>\nFind out more here: [https://github.com/cybercase/up2_hacking](https://github.com/cybercase/up2_hacking)\n\n### Having fun with Jawbone UP2\n\nA few months after releasing [UpNotifications for UP24](../up24_notifications)\nI received a lot of emails asking to add support for the new **Jawbone UP2**.\n\nAs soon as Jawbone made the UP2 available outside the US I placed my order,\nand after receiving the new band, without thinking too much I started tuning the UpNotifications\nsource code to include the UP2 among supported devices just to see if the same hack used for UP24 was working also on this band...\n\n> Unfortunately, it was not.\n\nI didn't give up, and following the same steps of my own [UP24 Hacking](../up24_reverse_engineering) blogpost,\nI opened Android Studio, turned on the debugger, started intercepting calls to the android BLE API and see what has changed with respect to UP24...\n\nThe bluetooth packets I was reading were completely different from the UP24 packets,\nso I thought that maybe it was just a matter of replacing the old UP24's pairing command with the new UP2's one. And so I did.\n\nI soon found out that the same trick of _sending a pairing command to make the band vibrate_ was not working because\nthe new UP2 knows if it has been already paired with a phone, and in that case it does not vibrate on pairing.\n\nWhile the UP24 **allowed anyone** to make vibrate your band without your permission just by sending a pairing command,\nwith the UP2 **Jawbone has fixed this issue**. Though this is a good news for all UP2 owners, this meant that I had to\nfind another way to trigger the vibration.\n\n> I needed to go deeper.\n\nI struggled to understand how the communication protocol has changed, and see if I could find another command to exploit.\nBut just looking at the stream of bluetooth packets wasn't enough...\n\nso I though of disassembling the app and inspecting its `.smali` source code using [apktool](http://ibotpeaches.github.io/Apktool/)\nto search for anything that could be useful.\n\nAfter going through the sources for a while I noticed a `log` method used all over the app, probably for debugging purposes,\nthat was disabled just by a simple flag check.\n\nIn a file called `JBLog.smali`, I changed the following lines\n\n```\n-    if-nez v0, :cond_0\n+    if-eqz v0, :cond_0\n```\n\nthen reassembled the app and installed into my phone.\n\n> I started getting a lot of debug information placed there right from UP developers :)\n\nI immediately found out that the communication protocol was much more sophisticated than the one used for UP24.\n\nLog messages like this\n\n```\n8257-8288/com.jawbone.upopen I/UPOPEN﹕ StreamService >>> writeOutputStream > KeyExchangeRequest >\n    f >> (0, 63, 0) > 0x03\n    g >> (1, 63, 0) > 0x00\n    h >> (2, 63, 0) > 0xd3\n    i >> (3, 63, 0) > 0x10\n    d >> (4, 63, 0) > 7FA19B1353FC584CAEF3D4214C74A365\n```\n\nand\n\n```\n8257-7505/com.jawbone.upopen D/SecuredStream﹕ generateSeed > 271372323671BDEE846276EF48B53F75\n8257-7505/com.jawbone.upopen D/SecuredStream﹕ 8200CD05803A090000 xor D4CB772B8B9D389527 = 56CBBA2E0BA7319527\n```\n\nand\n\n```\n8257-7505/com.jawbone.upopen I/UPOPEN﹕ StreamService >>> writeOutputStream > SecureChannelRequest >\n    f >> (0, 63, 0) > 0x06\n    g >> (1, 63, 0) > 0x00\n    h >> (2, 63, 0) > 0xd0\n    i >> (3, 63, 0) > 0x10\n    c >> (4, 63, 0) > F9FC5162DC8B609B6F891BC88648A49A\n    d >> (4, 63, 0) > null\n```\n\nwere suggesting that the protocol was relying on some kind of encryption to communicate over a secure channel, using a shared encryption key exchanged at the time of pairing.\n\n> I needed more, so I thought of using a decompiler.\n\nI tried some like [Procyon](https://bitbucket.org/mstrobel/procyon/), [CFR](http://www.benf.org/other/cfr/) to get as much information as possible. With the help of a great tool called [BytecodeViewer](https://github.com/Konloch/bytecode-viewer), I stared to follow the code paths, drawing diagrams, understand the app flow and structures...\n\nEventually I reproduced all the steps needed to pair and setup an encrypted communication channel with the UP2 and send the vibration command I needed :)\n\n<iframe class=\"line-11-m line-17-d\" src=\"//www.youtube.com/embed/uwsyjyM5GJU\" frameborder=\"0\" allowfullscreen></iframe>\n\n> Victory! ... almost.\n\nAs I came back on my initial goal of integrating UP2 support into UpNotifications, I realized that it would be very hard to achieve any kind of _user friendly_ experience.\n\nThe first problem comes from the fact that the encryption key is kept secret into the original UP application, and the only way to retrieve such key is to have a _rooted_ phone.\n\nThe second crucial problem is that, even if it was possible to get the encryption key easily, UP2 supports only one bluetooth connection at time.\nThis means that an _UpNotifications for UP2_ would not work while the band is connected to the original UP application.\n\nAnd since there's no way (without root permission) to control when the UP app runs or communicates with the band, **UpNotifications for UP2 would be incompatible with the official UP app**.\n\n> I still haven't decided whether write an _UpNotifications for UP2_ or not...\n\n~~So, for the time being, I'm not releasing the source code of the \"test\" app I wrote~~ (moreover, currently the code is quite a mess).\n\nAlso, I want to be sure of the legal consequences of releasing any protocol specs...\n\nUnlike the old UP24, Jawbone is using this protocol on devices like UP4 for [contactless payments](https://jawbone.com/blog/introducing-up4/), so this time they could be much more interested in keeping the protocol as much secret as possible to avoid security issues.\n\n_-- 19/09/2015_\n"},{"slug":"up24_notifications","title":"UpNotifications for Jawbone UP24","description":"Jawbone up24 call notifications","date":"2015-03-21T00:00:00.322Z","content":"\n# UpNotifications for Jawbone UP24\n\n**UPDATE**: Google has changed a how the app should ask for the `READ_SMS, RECEIVE_SMS` permissions. Unfortunately I've not been able to update UpNotifications and this resulted in the app being removed from the Play Store.\nI'm leaving here a link to the APK for anyone who's interested in trying out the app. Just keep in mind that I won't be able to provide any support.\n\n[UpNotifications APK Download](https://www.dropbox.com/s/9jkqaxjod6ilmkn/upnotifications.apk?dl=0)\n\n### Intro\n\nAfter my last blog post on [UP24 Reverse engineering](../up24_reverse_engineering) I received a lot emails about the Android application I wanted to write for myself to receive notifications on the jawbone up24 band.\n\nDuring the last month I found the time to write such app and release a [demostration video](https://www.youtube.com/watch?v=JFcVZpmnbII) of how it works.\n\n### First release\n\nTime has come to make this application publicly available, ~~and here you can have it for just a small fee that will allow me to keep the app up-to-date:\n<a href=\"https://play.google.com/store/apps/details?id=me.brilli.stefano.upnotifications\" target=\"_blank\">Download UpNotifications for UP24</a>.~~\n\n### Requirements\n\n- Official UP Application\n- An UP24 band paired with your device\n- Firmware version 3.0.21 running on your band\n\n### Disclaimer\n\nThis application has been widely tested and it is proven to work correctly; actually the author itself use this app on a daily basis to get calls and sms notifications on its wrist.\n\nHowever it is important to state that this application is the result of a reverse engineering process, hence:\n\n- It may interfere with normal functioning of the band\n- It may drain your band battery\n- It may stop working anytime (especially after band's software update)\n- It may not work with all band versions\n\n### Privacy Policy\n\nRead here the [UpNotifications privacy policy](/upnotifications_privacy)\n\n### Legal Notice\n\nThis product is not affiliated with, nor endorsed or licensed in any way by Jawbone.\nJawbone, UP, and UP24 are trademarks or registered trademarks of Jawbone corporation. All rights reserved.\n\n_-- 21/03/2015_\n"},{"slug":"up24_reverse_engineering","title":"UP24 Hacking","description":"Jawbone UP24 band vibration hack","date":"2014-10-11T00:00:00.322Z","content":"\n# UP24 Hacking\n\n### Intro\n\nLast month I received a [Jawbone UP24](http://jawbone.com/store/buy/up24) as birthday gift, and after a couple of weeks of _standard use_ I couldn't resist digging into its technical side to discover how this device actually works.\n\nAs far as I discovered, UP24 features a 3 axis accelerometer, 2 notification leds, a vibrating motor and a Bluetooth LE interface to communicate with the companion smartphone app \"UP\" (available for Android and iOS). Technical readers can find further info and a complete teardown of the _low-end_ version of UP24 (the older UP) [here](http://www.eevblog.com/forum/blog/eevblog-412-jawbone-up-pedometer-teardown/).\n\nThe strength of UP24 comes also from the great companion app that let users configure alarms and notifications in response of activities or events. Great features are the _smart alarm_ that chooses the best time to wake you up in the morning, and _idle notifications_ that reminds you to stretch your legs after being too much time idle on the chair.\n\nThe UP24 is definitely meant to be an activity band, and I think this is the sole reason why the guys ad Jawbone decided (at the time of writing) to not provide some extra useful features (IMO) like notifications on email/sms/calls/etc...\n\n<iframe class=\"line-17-d line-11-m\" src=\"//www.youtube.com/embed/fVznagkOwo0\" frameborder=\"0\" allowfullscreen></iframe>\n\n### Beginning\n\nI wanted to use my UP24 as a notification device for messages coming from some of my android phone's contacts... something simple, like a _vibrate on sms_.\n\nSo, as usual, the first question is\n\n> \" has someone already solved my problem? \"\n\nGoogling around I found [something here](http://www.plutinosoft.com/hacking-bluetooth-le/) and [here](https://forums.adafruit.com/viewtopic.php?f=8&t=51450).\n... Perfect! Just no code available, and wrong OS :)\n\nHowever, thanks to these blogposts I knew it was possible to make vibrate my UP on command, and it had to be done through some custom Bluetooth LE command.\n\n### Learning\n\nAfter learning the basics of Bluetooth LE ([here's](https://www.usenix.org/conference/woot13/workshop-program/presentation/ryan) one of the most interesting article I found) I needed to find out how to use it on my Android.\n\nFound a great example and all the necessary documentation [here](http://developer.android.com/samples/BluetoothLeGatt/index.html), and after installing Android Studio I was ready to start!\n\n### Doing\n\nUsing the example from Android SDK I was able to list all the services of my UP24 in matter of minutes... However I still hadn't a clue of what services, attributes, and values I had to exploit to make the UP24 vibrate.\n\n> Then I thought of debugging the process on my phone\n\nto see what was happening behind the scene while issuing a vibrate command. Note, there isn't any _vibrate command_ in UP application, but I noticed that after a successful bluetooth pairing the band vibrates; and that was exactly the reaction I wanted to use for my custom-notifications app.\n\nAfter connecting my phone to the Android Studio debugger I did set a breakpoint for UP's process to break at `BluetoothGatt.writeCharacteristic` method... This made everything _a lot_ slower both on my old phone and laptop but in the end, after a successful pairing, I got what I wanted :)\n\n> -20 32 8 16 4 53 1 0 16 0 1 125.\n\nAnd by the end of the day I was able to record the video at the top of this page.\n\n<div class=\"mtop-1-m mtop-1-d line-16-d line-13-m\" style=\"text-align: center;\">\n    <img src=\"/images/up24_pairing.jpg\" alt=\"Successful UP24 Pairing\" style=\"width: 100%;\"/>\n</div>\n\n### Epilogue\n\nI'm still writing my custom-notifications app, nevertheless I'm not releasing any of the source code of this project due to possible legal issues. However, for any _mid-level_ programmer should be easy to achieve the same results just by following the steps of this blogpost.\n\n### Assignment\n\nI also managed to make some experiments in order to reverse engineer a couple of the _sniffed_ values... what if you change the previous value to \"-20 32 8 16 4 53 1 0 **3** 0 1 125\" ? :)\n\n_-- 10/11/2014_\n"},{"slug":"pre_commit_hook_pep8","title":"Pre-commit Hook - PEP8 Version","description":"Python PEP8 commit hook for git","date":"2013-09-15T00:00:01.000Z","content":"\n# Pre-commit Hook\n\n## PEP8 Version\n\nA couple of days ago I've refactored and enhanced my pre-commit hook to check also for PEP8 compliancy of Python source files. To achieve this I used the pep8 tool that you can easily install with:\n\n`pip install pep8`\n\nAnd here's the new pre-commit hook:\n\n    #!/bin/bash\n    #\n    # TAB CHECK:\n    #\n    # Searches tab characters in staged changes.\n    # To specify file extensions to check use \"hooks.notabs\" variable.\n    # Extensions are separated by \"|\".\n    # Eg:\n    #   git config hooks.notabs html|js\n    #\n    # PEP8 CHECK:\n    #\n    # run pep8 on all python staged files.\n    # To specify pep8 command options use \"hook.pep8options\" variable\n    #\n    # Eg:\n    #   git config hook.pep8 \"--ignore=E226,E302\"\n\n    exec 1>&2\n\n    notabs=$(git config hooks.notabs)\n    notabs_error=0\n    for f in `git diff --cached --name-only | egrep \"\\.(\"$notabs\")$\"`\n    do\n        lines=`git show :$f | fgrep -n $'\\t'`\n        if [ -n \"$lines\" ]; then\n            echo \"TAB(s) found in:\" $f \"at line(s)\"\n            echo $lines\n            notabs_error=1\n        fi\n    done\n\n    if [ $notabs_error -eq 1 ]; then\n        echo\n        echo \"Remove all TAB(s) characters and stage again your changes.\"\n        echo\n        exit 1\n    fi\n\n    pep8_options=$(git config hooks.pep8options)\n    pep8_error=0\n    for f in `git diff --cached --name-only | egrep \".py$\"`\n    do\n        git show :$f | pep8 --format=$f\":%(row)d:%(col)d: %(code)s %(text)s\" $pep8_options -\n        if [ $? -eq 1 ]; then\n            pep8_error=1\n        fi\n    done\n\n    if [ $pep8_error -eq 1 ]; then\n        echo\n        echo \"Your commit is cause of one or more PEP8 error(s)\"\n        echo\n        echo \"Please fix these errors and stage again your changes\"\n        echo\n        exit 1\n    fi\n\nThis new version is quite straightforward so I'm not digging too much into it.\nThe two main changes are:\n\n- Discover of command `git show` :)\n- Add pep8 style test\n\nAbout the latter point, it's important to say that the pep8 has becomes one of the requirements to use this hook. Also, you can configure your pep8 options by typing:\n\n`git config --add hooks.pep8options \"--ignore=E121,E122\" # this ignores Error 121, 122`\n\nA complete list of errors and warnings of pep8 tool is available here: http://pep8.readthedocs.org/en/latest/intro.html#error-codes\n\nPS.\n\nI'm using this hook just from a couple of days, so it may (probably) have some bugs... feel free to contribute at <https://github.com/cybercase/funproject/blob/master/experiments/pre-commit> ;)\n\n_-- 15/09/2013_\n"},{"slug":"pre_commit_hook","title":"Pre-commit Hook","description":"Writing a commit hook for git","date":"2013-08-13T00:00:01.000Z","content":"\n# Pre-commit Hook\n\nThe project on which I'm working has acquired some young people recently.\n\nFor a couple of them it's even their first working experience so I'm really\ntrying to transmit them the importance of conventions and an uniform coding style.\n\nIt's usual (and perfectly normal) to find some coding style mistakes in their commits.\nSo, to help us happily code all together, I created a small pre-commit hook\nto put in our repositories.\n\nRight now it's just a simple no-tabs check, but with some small changes it could\ncheck for use of deprecated functions or some forgotten `import pdb; pdb.set_trace()` :)\n\n    # Files extensions in hooks.notabs are separated by \"|\"\n    # Eg:\n    #   git config hooks.notabs py|js\n\n    exec 1>&2\n    notabs=$(git config hooks.notabs)\n    toplevel=$(echo \"`git rev-parse --show-toplevel`/\" | sed -e 's/[\\/&]/\\\\&/g')\n    if [ -n \"$notabs\" ] &&\n        git diff --cached -- not_a_file `git diff --cached --name-only |\n          egrep '\\.('$notabs')$' |\n          sed 's/^/'$toplevel'/g' | xargs` |\n          egrep -qn $'^\\+\\.*\\t'\n    then\n        echo \"Error: Attempt to add TABS\"\n        echo\n        echo \"Do you really want to break our beautiful coding conventions? :(\"\n        echo\n        echo \"Remove all tabs characters and stage again your changes.\"\n        echo\n        echo \"To override this hook use:\"\n        echo\n        echo \"  git commit --no-verify\"\n        echo\n        exit 1\n    fi\n\nTo have it working:\n\ncopy this script into `repository_dir/.git/hooks/pre-commit`.\nAdd some file extensions to hooks.notabs variable (these must be separated by |).\nDone!\n\nLet's look at each parts in rigorous order of execution\n\n- `notabs=$(git config hooks.notabs)`: retrieves from local config the files extensions to check\n\n- `git diff --cached --name-only`: lists names of files that have staged changes\n\n- `egrep '\\.('$notabs')$'`: removes files having different extensions from the ones in notabs\n\n- `sed 's/^/'$toplevel'/g'`: prepend the absoulute path to each filename\n\n- `xargs`: creates a list of arguments using previous file names list\n\n- `git diff --cached -- not_a_file`: returns staged changes for files coming from \"xargs\". Note that \"not_a_file\" is an unexistant file, specified in case that the output of xargs is empty. In fact if no files are specified the \"git diff --cached\" command would return staged changes for every file.\n\n- `egrep -qn '^\\+\\.*\\t'`: searches for all the lines starting with \"+\" and containing a tab\n\nNote that this pre-commit hook can be easily bypassed using.\n\n`git commit --no-verify`\n\nThis reflects exactly the same thought I want communicate to my collegues. Everyone should\nstruggle to pass the pre-commit hook checks, but no one should be forced to.\n\nReferences:\n\n1. [Customizing-Git-Git-Hooks](http://git-scm.com/book/en/Customizing-Git-Git-Hooks)\n\n_-- 13/08/2013_\n"},{"slug":"python3_metaprogramming","title":"Python 3 Metaprogramming","description":"Experimenting with Python 3 Metaprogramming","date":"2013-05-22T00:00:01.000Z","content":"\n# Python 3 Metaprogramming\n\nHow can you import XML files into Python 3?\nAnd why you would?\n... This blogpost doesn't answer this last question, but it's definetly going to answer the first one :)\n\nEverything I'm writing is taken from this talk from David Beazley: [youtube video](https://www.youtube.com/watch?v=sPiWg5jSoZI).\nConsider this post as a very little summary of its contents.\n\nLet's start with the requirements:\nPython 3.3\n... that's all!\n\nAnd let's see what you're getting:\n\nIf you define a file structures.xml like this\n\n    <structures>\n        <structure name=\"Stock\">\n            <field type=\"SizedString\" maxlen=\"4\">name</field>\n            <field type=\"PosInteger\">shares</field>\n            <field type=\"PosFloat\">price</field>\n        </structure>\n    </structures>\n\nAt the end of this blogpost you will get this\n\n    >>> from structures import *\n    >>> s = Stock(\"GOOG\", 100, 99.0)\n    >>> # DEFAULT INITIALIZER\n    >>> s.name, s.shares, s.price\n    ('GOOG', 1, 1.0)\n\n    >>> # TYPE CHECKING\n    >>> s.name = 100\n    TypeError: Expected <class 'str'>\n\n    >>> # CONSTRAINT CHECKING\n    >>> s.name = \"GOOOOOOG\"\n    ValueError: Too big\n\nSo, if this just aroused your curiosity, go on reading ;)\n\nThe first step is to have a look at descriptors.\nDescriptors is just how properties are implemented in python [see this link]. In this example, we use them as classes to perform checks on values assignment.\nSo, let's take as example a descriptor that performs a check such that only values of type str within a certain length are allowed.\n\n    class StringDescriptor:\n        def __init__(self, name, maxlen):\n            self.name = name\n            self.maxlen = maxlen\n\n        def __set__(self, instance, value):\n            if type(value) != str:\n                raise TypeError(\"Wrong type, expected: %s\" % str(str))\n            elif len(value) > self.maxlen:\n                raise ValueError(\"String too long\")\n            instance.__dict__[self.name] = value\n\n        def __get__(self, instance, cls):\n            # Actually performs the default action. Just don't define this\n            # method to get the default behavior.\n            return instance.__dict__[self.name]\n\n    class Stock:\n        name = StringDescriptor(\"name\", 4)\n        def __init__(self, name):\n            self.name = name\n\n    >>> st = Stock(\"GOOG\")\n    >>> st.name = \"GOOOOOG\"\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"post.py\", line 10, in __set__\n        raise ValueError(\"String too long\")\n    ValueError: String too long\n\n    >>> st.name = 1\n\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"post.py\", line 8, in __set__\n        raise TypeError(\"Wrong type, expected: %s\" % str(str))\n    TypeError: Wrong type, expected: <class 'str'>\n\n    To handle different descriptors, David uses a descriptors hierarchy like the following:\n    class Descriptor:\n        def __init__(self, name=None):\n            self.name = name\n        def __set__(self, instance, value):\n            instance.__dict__[self.name] = value\n        def __delete__(self, instance):\n            raise AttributeError(\"Can't delete\")\n\n    class Typed(Descriptor):\n        ty = object\n        def __set__(self, instance, value):\n            if not isinstance(value, self.ty):\n                raise TypeError('Expected %s' % self.ty)\n            super().__set__(instance, value)\n\n    class Sized(Descriptor):\n        def __init__(self, *args, maxlen, **kwargs):\n            self.maxlen = maxlen\n            super().__init__(*args, **kwargs)\n        def __set__(self, instance, value):\n            if len(value) > self.maxlen:\n                raise ValueError('Too big')\n            super().__set__(instance, value)\n\n    class String(Typed):\n        ty = str\n\n    class Integer(Typed):\n        ty = int\n\n    class Float(Typed):\n        ty = float\n\nThen merges the descriptors using multiple inheritance... But pay attention at MRO! (method resolution order)\n\n    class Positive(Descriptor):\n        def __set__(self, instance, value):\n            if value < 0:\n                raise ValueError('Expected >= 0')\n            super().__set__(instance, value)\n\n    class PosInteger(Integer, Positive):\n        pass\n\n    class PosFloat(Float, Positive):\n        pass\n\nFinally to get rid of the repeated variable's name in the descriptor constructor, David use a metaclass to inject the name into the descriptor:\n\n    class StructMeta(type):\n        def __new__(cls, name, bases, clsdict):\n            fields = [ key for key, val in clsdict.items()\n                    if isinstance(val, Descriptor) ]\n            for name in fields:\n                clsdict[name].name = name\n            clsobj = super().__new__(cls, name, bases, clsdict)\n            return clsobj\n\nThe Stock class definition now becomes\n\n    class Stock(metaclass=StructMeta):\n        name = SizedString(maxlen=4)\n        shares = PosInteger()\n        price = PosFloat()\n\n        def __init__(self, name, shares, price):\n            self.name = name\n            self.shares = shares\n            self.price = price\n\nThere is still another \"problem\" that David try to solve: the code repetition inside the **init** method.\nTo address this problem, he changes the previous metaclass as follows.\nfrom collections import OrderedDict\n\n    class StructMeta(type):\n        @staticmethod\n        def __prepare__(cls, name, bases=None):\n            # this method returns the dictionary used by the class instance.\n            # To generate a signature the parameters order is crucial, so an\n            # OrderedDict is used\n            return OrderedDict()\n\n        def __new__(cls, name, bases, clsdict):\n            fields = [ key for key, val in clsdict.items()\n                    if isinstance(val, Descriptor) ]\n            for name in fields:\n                clsdict[name].name = name\n\n            # the following block generates the code for __init__ method\n            if len(fields):\n                init_code = 'def __init__(self, %s):\\n' % \\\n                            ', '.join(fields)\n                for name in fields:\n                    init_code += '    self.%s = %s\\n' % (name, name)\n                exec(init_code, globals(), clsdict)\n\n            clsobj = super().__new__(cls, name, bases, dict(clsdict))\n            return clsobj\n\nAnd the Stock class becomes\n\n    class Stock(metaclass=StructMeta):\n        name = SizedString(maxlen=4)\n        shares = PosInteger()\n        price = PosFloat()\n\nAt this point it's convenient introduce a Structure base class:\n\n    class Structure(metaclass=StructMeta):\n        pass\n\n    class Stock(Structure):\n        name = SizedString(maxlen=4)\n        shares = PosInteger()\n        price = PosFloat()\n\nAnd finally we get to the XML part :)\nThe first goal is to generate the python code from the XML file. To achieve this the David use these functions:\n\n    from xml.etree.ElementTree import parse\n    def _xml_to_code(filename):\n        doc = parse(filename)\n        code = ''\n        for st in doc.findall('structure'):\n            code += _xml_struct_code(st)\n        return code\n\n    def _xml_struct_code(st):\n        stname = st.get('name')\n        code = 'class %s(Structure):\\n' % stname\n        for field in st.findall('field'):\n            name = field.text.strip()\n            dtype = field.get('type')\n            kwargs = ', '.join('%s=%s' % (key, val)\n                                for key, val in field.items()\n                                if key != 'type')\n            code += '    %s = %s(%s)\\n' % (name, dtype, kwargs)\n        return code\n\nAnd the result of parsing the structure.xml file (defined at the beginning of the blogpost) is:\n\n    >>> print(_xml_to_code(\"structures.xml\"))\n    class Stock(Structure):\n        name = SizedString(maxlen=4)\n        shares = PosInteger()\n        price = PosFloat()\n\nThe final step consists in hooking to the python import system. Full details about the new Import Hooks feature of Python3.3 are found at [PEP-302].\nWe begin defining a new importer class to append at sys.meta_path\n\n    import os\n    class StructImporter:\n        def __init__(self, path):\n            self._path = path\n        def find_module(self, fullname, path=None):\n            name = fullname.rpartition('.')[-1]\n            if path is None:\n                path = self._path\n            for dn in path:\n                filename = os.path.join(dn, name+'.xml')\n                if os.path.exists(filename):\n                    return StructXMLLoader(filename)\n            return None\n\nAnd an XML module loader\n\n    import imp\n    class StructXMLLoader:\n        def __init__(self, filename):\n            self._filename = filename\n        def load_module(self, fullname):\n            mod = sys.modules.setdefault(fullname,\n                                        imp.new_module(fullname))\n            mod.__file__ = self._filename\n            mod.__loader__ = self\n            code = _xml_to_code(self._filename)\n            # actually this is bad. I should use mod.__dict__\n            # instead of globals(), and add an import statement into\n            # \"code\" to load Structure and the other classes.\n            exec(code, globals(), mod.__dict__)\n            return mod\n\n    import sys\n    def install_importer(path=sys.path):\n        sys.meta_path.append(StructImporter(path))\n\n    install_importer()\n\n    And finally here we are:\n    Python3.3 -i xmlimport.py\n    >>> from structures import *\n    >>> s = Stock(\"GOOG\", 1, 1.0)\n\nYou can find the final version of the xmlimporter.py and structures.xml under the folder\n\n`python_metaprogramming` in my git repository at:\n\n`git://github.com/cybercase/funproject.git`\n\nIf you got 3 hours to spend, and a lot of love for this metaprogramming stuff, I really suggest to watch the entire video from David Beazley. Also, I apologize in advance for any error in this blogpost.\n\n_-- 22/05/2013_\n"},{"slug":"holidays_and_gpu","title":"Holidays and GPU","description":"Post about my GPU project before vacation","date":"2012-09-25T00:00:01.000Z","content":"\n# Holidays and GPU\n\nNext week I am visiting London.\n\nIn the meanwhile enjoy a code preview of A GPU Exercise part 1 and part 2.\nTo get, compile, and test the code, clone my funproject repository on github.\n\n    git clone git://github.com/cybercase/funproject.git\n\nTo compile the code is required the _NVIDIA CUDA Toolkit_. Then run:\n\n    cd funproject\n    cmake .\n    make\n\nIf CUDA Toolkit was found by CMake, then the lev_distance target should be built into the experiments directory. To quickly test the performances run:\n\n    cd experiments\n    ./lev_distance lev_distance.cu thread.h\n\nThe following result is achieved on my late 2010 MBA\n\n    lev_distance.cu size is 8716 bytes\n    thread.h size is 17818 bytes\n    LevDistance...\n    elapsed time: 9.240 (s)\n    CudaLevDistance...\n    elapsed time: 0.872 (s)\n    Results matches!\n    Distance: 14332\n\nPlease note that this is an educational implementation, and several improvements can be done to exploit all the features of the underlying architecture...\n\nBut before talking about this... holidays! :)\n\n_-- 25/09/2012_\n"},{"slug":"gpu_exercise2","title":"A GPU Exercise - part 2","description":"","date":"2012-09-16T00:00:01.000Z","content":"\nThis is the sequel of previous post: [A GPU Exercise - part 1](./gpu_exercise)\n\nLet's resume from the algorithm for computing the Levenshtein distance among two strings. To fill every cell of the subrpoblems matrix, we can allocate a 2 dimensional array and then proceed like this:\n\n    // C-Like syntax: don't expect this compiles :)\n    int lev_distance(char* string_one, char* string_two) {\n      int m = strlen(string_one)+1;\n      int n = strlen(string_two)+1;\n      int matrix[m][n];\n\n      for (int j=0; j < n; ++j) { // Step1: Init first row\n        matrix[0][j] = j;\n      }\n\n      for (int i=0; i < m; ++i) { // Step2: Init first column\n        matrix[i][0] = i;\n      }\n\n      for (int i=1; i < m; ++i) { // Step3: Fill every cell\n        for (int j=1; j < n; ++j) {\n          if (string_one[i-1] == string_two[j-1]) {\n            matrix[i][j] = matrix[i-1][j-1];\n          } else {\n            matrix[i][j] = min(matrix[i][j-1],\n              matrix[i-1][j],\n              matrix[i-1][j-1]) + 1;\n          }\n        }\n      }\n      return matrix[m-1][n-1]; // cell containing cost of the real problem\n    }\n\nBut, if we look carefully at Step3 inner loop, it's easy to see that there is not need to store the entire matrix since, for each cell, we need just the immediately preceding ones. Hence, to reduce allocated memory, it's possible to change the algorithm like this:\n\n    int lev_distance(char* string_one, char* string_two) {\n      int m = strlen(string_one); // Note: removed +1\n      int n = strlen(string_two)+1;\n\n        int current[n];\n        int previous[n];\n        for (int j=0; j < n; ++j) {\n            previous[j] = j;\n        }\n\n        for (int i=0; i < m; ++i) {\n            current[0] = i+1;\n            for (int j=1; j < n; ++j) {\n            // Note: the if is replaced by the conditional assignment\n                current[j] = (previous[j]+1, current[j-1]+1,\n                  previous[j-1] + (string_one[i] != string_two[j-1] ? 1 : 0) );\n            }\n            swap(current, previous);\n        }\n        return previous[n-1];\n    }\n\nNow, only 2 array of size `strlen(string_two)+1` are stored.\n\nThis algorithm is quite good for a singlecore cpu implementation, since it has good data locality... Small strings can be stored entirely inside the cache memory to achive the best performances. However, think about optimising this algorithm for a multicore CPU... It's easy to notice the strong data dependancy: we can't compute the value of a cell if we didn't already computed the previous ones.\n\nTo overcome this problem and take the full advantage of using multiple cores we need to change the algorithm. And these are the changes (can you find another way?).\n\nInstead of walking over the matrix by rows and then by columns, we can walk by diagonals to avoid some data dependancies. Look at the followings steps:\n\nCompute the value of cell $$c_{1,1}$$ (previous needed values $$c_{1,0}$$ $$c_{0,1}$$ and $$c_{0,0}$$ comes from initialisation)\n\n<div class=\"line-5-m line-5-d text-center\">\n\n$$\\begin{array}{|c|c|c|c|c|c|} \\hline _{X}\\backslash^{Y} & \\# & y_1 & y_2 & y_3 & \\cdots \\\\ \\hline \\# & 0 & 1 & 2 & 3 \\\\ \\hline x_1 & 1 & \\mathbf{c_{1,1}} \\\\ \\hline x_2 & 2\\\\ \\hline x_3 & 3 \\\\ \\hline \\vdots\\\\ \\hline \\end{array}$$\n\n</div>\n\nCompute cells $$c_{2,1}$$ and $$c_{1,2}$$: cell $$c_{2,1}$$ requires cells $$c_{1,1}$$ (computed in the previous step), cell $$c_{2,0}$$ and $$c_{1,0}$$ (both comes from initialisation). Same for cell $$c_{1,2}$$.\n\n<div class=\"line-5-m line-5-d text-center\">\n\n$$\\begin{array}{|c|c|c|c|c|c|} \\hline _{X}\\backslash^{Y} & \\# & y_1 & y_2 & y_3 & \\cdots \\\\ \\hline \\# & 0 & 1 & 2 & 3 \\\\ \\hline x_1 & 1 & c_{1,1} & \\mathbf{c*{1,2}} \\\\ \\hline x_2 & 2 & \\mathbf{c*{2,1}} \\\\ \\hline x_3 & 3 \\\\ \\hline \\vdots \\\\ \\hline \\end{array}$$\n\n</div>\n\nCompute cell $$c_{3,1}$$ $$c_{2,2}$$ and $$c_{1,3}$$: cell $$c_{2,2}$$ requires cells $$c_{1,1}$$ (computed in step 1) $$c_{2,1}$$ and $$c_{1,2}$$ (from step 2)\n\n<div class=\"line-5-m line-5-d text-center\">\n\n$$\\begin{array}{|c|c|c|c|c|c|} \\hline _{X}\\backslash^{Y} & \\# & y_1 & y_2 & y_3 & \\cdots \\\\ \\hline \\# & 0 & 1 & 2 & 3 \\\\ \\hline x_1 & 1 & c_{1,1} & c*{1,2} & \\mathbf{c*{1,3}} \\\\ \\hline x*2 & 2 & c*{2,1} & \\mathbf{c*{2,2}} \\\\ \\hline x_3 & 3 & \\mathbf{c*{3,1}} \\\\ \\hline \\vdots \\\\ \\hline \\end{array}$$\n\n</div>\n\nAnd so on...\nAt a given step, each cell refers to the cells computed in the previous steps, and never to the ones of the same. Precisely, filling the cells in step $$i$$ requires filling cells at step $$i-1$$ and $$i-2$$.\n\nThis allow us to rewrite the algorithm in a way such that all of the cells in a certain diagonal can be filled concurrently since the data dependancy has been moved among diagonals.\n\nUnfortunately I don't have enough time to show the pseudo code of this algorithm in this post because, even if this new algorithm can be conceptually simple to understand, a good implementation requires the handling of a some special cases that will make the code snippet definitely too long to explain in this blogpost...\n\nInstead, I'm going to push (and talk about) the code on my github account during the next blogpost.\n\n... suspense is raising, isn't it? :)\n\n_--16/09/2012_\n"},{"slug":"gpu_exercise","title":"A GPU Exercise - part 1","description":"","date":"2012-09-13T00:00:01.000Z","content":"\n# A GPU Exercise\n\n## Part 1\n\nIt's been several months since the last time I put my hands on something related to GPUs. Sadly, I get very rarely the chance to get this kind of jobs.\nSo, to keep myself trained (just in case I will get one), during the last two weeks I worked on an \"exercise project\".\n\nFor this exercise project I choosed to port to GPU an algorithm that I studied during my University years. [Here you can find some informations](http://en.wikipedia.org/wiki/Levenshtein_distance):\n\nI'll try to explain in few words and with a little example what is the Levenshtein distance.\nGiven two strings, the Levenstein distance is the minimum number of character insertion, deletion or substitution, to change a string into the other, ie:\n\nThe Levenshtein distance between RISOTTO and PRESTO is 4:\n\n1. Insert P\n2. Substitute I with E\n3. Delete O\n4. Delete T\n\nFinding the shortest list of operations to change a string into another is a problem that can be solved by using the Dynamic Programming technique. The main trouble is that, in many cases, this technique requires an huge amount of memory to store intermediate results and avoid recomputing.\n\nIn fact, this algorithm requires a amount of memory proportional to the product of the lengths of the 2 strings: if len(string1) is m, and len(string2) is n, then the memory and operations requirement is O(m\\*n).\n\nThe required memory amount can be reduced in several ways... expecially exploiting some of the upper bounds of the optimal solution (see the wikipedia link at the top of this article).\n\nHowever, if we compute just the number of operations (without actually knowing which operations are performed), the memory requirement can be reduced up to O(max(m, n)), even though the number of operations remains unchanged at O(m\\*n).\n\nLet's try to understand how the algorithm works, and hence, why computing the optimal cost, in terms of number of changes, is cheaper (in terms of memory) than computing the entire operations list.\n\nGiven two string $$X$$ and $$Y$$ such that $$X=x_1,x_2,...,x_m$$ and $$Y=y_1,y_2,...,y_n$$ , we can use a matrix to represent the solutions of each subproblem.\n\n<div class=\"line-5-m line-5-d text-center\">\n\n$$\\begin{array}{|c|c|c|c|c|c|} \\hline _{X}\\backslash^{Y} & \\# & y_1 & y_2 & \\cdots & y_n \\\\ \\hline \\#\\\\ \\hline x_1\\\\ \\hline x_2\\\\ \\hline \\vdots\\\\ \\hline x_m\\\\ \\hline \\end{array}$$\n\n</div>\n\nWhere cell $$i,j$$ will contain the cost of the optimal solution for the subproblem of changing string $$X_i=\\#,x_1,x_2,...,x_i$$ into $$Y_i=\\#,y_1,y_2,...,y_j$$ with $$i \\leq m$$ and $$j \\leq n$$. The $$ \\# $$ character represents the empty string.\nNote that the first row and column of this matrix, are quite easy to fill:\n\nThe first column contains the costs of changing any of the $$X$$ substrings into the empty $$\\#$$ string. So, substring $$X_1$$ (formed by the empty string plus the $$x_1$$ character) will require 1 deletion to change into substring $$Y_0$$ (the empty string)... $$X_2$$ will require 2 deletion, $$X_3$$ is 3, and so on...\nThe first row contains the cost of changing the empty string into the substring $$Y_j$$. So, the cost of changing the empty string into $$Y_1$$, will be 1 insertion, $$Y_2$$ is 2, and so on...\nObviusly, the cell $$0,0$$ containing the cost of changing $$\\#$$ in $$\\#$$, that is 0.\n\n<div class=\"line-5-m line-5-d text-center\">\n\n$$\\begin{array}{|c|c|c|c|c|c|} \\hline _{X}\\backslash^{Y} & \\# & y_1 & y_2 & \\cdots & y_n \\\\ \\hline \\# & 0 & 1 & 2 & \\cdots & n\\\\ \\hline x_1 & 1\\\\ \\hline x_2 & 2\\\\ \\hline \\vdots\\\\ \\hline x_m & m\\\\ \\hline \\end{array}$$\n\n</div>\n\nNow that we have defined the base cases, we can look at how it's possible to fill the remaining cells, and thus finding the costs of the optimal solutions. Let's take as example the cell $$1,1$$ corresponding to subproblem of changing $$X_1=\\#,x_1$$ into $$Y1=\\#,y_1$$.\n\nThe easiest case is when $$x_1=y_1$$. In this case we don't need to perform any operation over the previous subproblem of changing $$X_0$$ into $$Y_0$$, hence the costs are the same.\n\nIf $$x_1$$ differs from $$y_1$$, then we can choose the cheapest among the three following options:\n\n- Substitute $$x_1$$ with $$y_1$$. The cost will be 1 plus the cost of changing $$X_0$$ into $$Y_0$$.\n\n- Insert the character $$y_1$$ to $$Y_0$$. The cost will be 1 plus the cost of changing $$X_1$$ into $$Y_0$$\n\n- Delete the character $$x_1$$ from the string $$X_1$$. the cost will be 1 plus the cost of changing $$X_0$$ into $$Y_1$$\n  In the same way it's possible to compute the values for all the other cells, by looking at the cells associated to the immediately preceding subproblems. In the end we will get the value of subproblem $$(X_m, Y_n)$$, that is the problem from which we started from.\n\nLet's make some observations:\n\n- The value of cell $$(j,i)$$ depends only from the comparison between $$x_i$$ and $$y_j$$ and value in cells $$(j-1,i-1)$$, $$(j-1,i)$$, $$(j,i-1)$$.\n\n- The operation that was performed to produce the value in cell $$(i,j)$$ can be deduced only by looking at $$x_i$$ and $$y_j$$ and value inside cells $$(j-1,i-1)$$, $$(j-1,i)$$, $$(j,i-1)$$.\n\nThis makes easy computing the value of a cell $$i,j$$ since we have to remember just the values of the immediatly preceeding subproblems.\nOn the other hand, to retrive all the operations associated to the optimal solution, it's necessary to store (or recompute) the values of all the preceeding cells, since it's not possible to know which cells you will need, until you know the \"subproblems path\" to the optimal solution.\n\nI hope you enjoied this simple introduction to the algorithm. In the next post I'm going straight into the implementation and the problems (and the solutions) of make run this algorithm on a GPU... attaching a lot of code of course :)\n\nAnd naturally, if you spot errors, I would be really happy to receive reports ;)\n\n_--13/09/2012_\n"},{"slug":"debug_pointer_overview","title":"Debug Pointer: a quick overview","description":"C++ Smart Pointer for Debugging - Design Decisions","date":"2012-09-01T00:00:01.000Z","content":"\n# Debug Pointer: a quick overview\nLet's focus on some keypoints of my debug_ptr:\n\n- What a debug_ptr is used for?\n  A debug_ptr can be used like a standard pointer type to hold the address of a dynamically allocated object:\n  `typedef_pointer(int*, int_p); int_p p = new int(0);`\n\n- How could it be useful?\n  If you forget to delete a dynamically allocated object before loosing its last reference, you are probably creating a memory leak. A debug_ptr warns you about this fact using a warning policy.\n\n\n    struct ThrowPolicy {\n        ThrowPolicy() {\n            throw std::runtime_error(\"lost reference to undeleted object\");\n        }\n    };\n    struct PrintPolicy {\n        PrintPolicy() {\n            std::cerr << \"WARNING: lost reference \"\n                            \"to undeleted object\" << std::endl;\n        }\n    };\n\n- How much does it cost? (in performance terms)\n  The features of debug_ptr are mostly useful in \"debug mode\". In a production release, you may not want use the features of a debug_ptr class (although you can), because of the performance losses due to the reference counting.\n\n- How did I address this issue?\n  You can compile your software by defining ENABLE_DEBUG_TYPES to get the debug_ptr feature turned on. Otherwise all the debug_ptr features are turned off by a macro that will substitute any occurrence of debug_ptr<T> with a T*. This will avoid any overhead at compile and run time.\n\n\n    #ifndef ENABLE_DEBUG_TYPES\n    #define typedef_pointer(Type, Alias, ...) typedef Type Alias\n    #define typedef_array(Type, Alias, ...) typedef Type Alias\n    #else // ENABLE_DEBUG_TYPES\n    ...\n    #endif\n\n- How debug_ptr syntax differs by the one of a standard pointer type?\n  debug_ptr it's intended to be used just like any other smart_ptr, and in most of the cases you should not notice any difference in creating, copying, dereferencing, assigning, and deleting...\n\n\n    typedef_pointer(int*, int_p);\n    int_p p = new int(0);\n    int_p p_other = new int(0);\n    *p = 63;\n    int_p p_other = p;\n    delete p_other;\n\n- How did you get the same delete syntax of a standard pointer type?\n  By defining a default cast operator to a pointer-to-deleter-class. The cast operator will be implicitly called and a new deleter object returns to operator delete. So, delete operator, deletes the deleter-class.\n\n\n    operator deleter*() const {\n        return deleter::new_deleter(pd_);\n    }\n\n\nAnd that's all folks!\n\nIf you have any question, just leave a comment.\nIf you like this project, or have any other ideas about what could be the next step of the debug_ptr, fork the project on github and have fun :)\n\n\n    git clone git://github.com/cybercase/debug_ptr.git # clone the repo\n    cd debug_ptr\n    g++ -Wall -o test debug_ptr_test.cc -DENABLE_DEBUG_TYPES\n    ./test\n\n_--01/09/2012_\n"},{"slug":"debug_pointer","title":"Debug Pointer","description":"C++ Smart Pointer for Debugging","date":"2012-08-22T00:00:01.000Z","content":"\n# Debug Pointer\n\nAs I mentioned in the last post, lately I'm working on a C++/Boost software (aka speeding up and refactoring an unmaintainable software). This software is just a kind of parser. It parses several binary files and, for each one, produces a xml file. Also it needs to merge and summarise some of the fields contained in each one of these files to produce a _Final Report_ xml file.\n\nThere may be several way to write a software for a task like this, and the customer choosed to use threads. A big mistake, because (IMHO) Who wrote the software did not have any idea of how use threads efficently, and he ended up using a lot of locks and semaphores everywhere... but this is another story.\n\nThe most impressive thing that I saw in this software was the inconsiderate abuse of Boost shared pointers. These were used almost everywhere in the software in every nonsense way they could be used... passing them around by copy or just like the following:\n\n    for (int i=0; i<SOMEINT; ++i) {\n        // Why not: SOMECLASS sp; ???\n        boost::shared_ptr<SOMECLASS> sp(new SOMECLASS);\n        sp->SomeMethod();\n    }\n\nJust by fixing these kind of misuses, I've got a speedup of over 2x.\n\nShared pointers can be really useful but they:\n\n- should be used with care because they can become really expensive\n- should not be used just to avoid thinking about memory management in your software\n\nAnd the last point is the one that I felt was the case of this software. For this reason, and for helping myself to refactor and remove shared pointers from this software, I wrote my own smart pointer: **debug_ptr**.\n\n**debug_ptr** is a smart pointer that should help the developer to manage the memory correctly (a delete for every new). A debug_ptr just warn the developer when he forgets to delete an dynamically allocated object, so that he can insert the correct delete (or `delete[]`) statement.\nAlso, debug_ptr is designed in a way such that, once you have tested your software and no memory leaks warning are raised anymore, it can be automatically substituted with a native pointer type, so that no overhead is added both at run and compile time.\n\nFor now you can check the debug_ptr source code and have a look at the few test cases that show how it can\nbe used. It's located in my debug_ptr repository on github:\n\n    git clone git://github.com/cybercase/debug_ptr.git # clone the repo\n    cd debug_ptr\n    g++ -Wall -o test debug_ptr_test.cc -DENABLE_DEBUG_TYPES\n    ./test\n\nIn the next post, I'll try to focus on some interesting parts of this very simple smart pointer.\n\n_--22/08/2012_\n"},{"slug":"concept_of_minimum","title":"The concept of minimum","description":"","date":"2012-03-10T00:00:01.000Z","content":"\n# The concept of minimum\n\nIt's been a while from my last post on this blog... Too much work and too few spare time :-/\n\nHowever lately, I'm reading a lot! It's much easier for me to find out the time to read an article, or source code from some project, than writing my own code... Writing good code takes actually not little time, so I thought that I can share some of my readings with the few readers of this blog. Better than nothing, isn't it?\n\nSo, let's start with this old article from Dr.Doobs <http://drdobbs.com/cpp/184403774> I just finished to read.\nI would never thought that a so simple question about implementing the min and max C macros using C++ templates would require such a long answer (and code).\n\nEven though lately I'm starting to think not-so-good about C++ (but this is not the post to talk about this), I find this kind of problems so mind teasing.\n\nAnd also... look at the author of the article! Yes, it's him :)\n\n_--10/03/2012_\n"},{"slug":"sorting_priorities","title":"Sorting Priorities","description":"Template Sorting in C++","date":"2012-01-15T00:00:01.000Z","content":"\n# Sorting Priorities\n\nLet's say you have your 3d colored point type:\n\n    struct MyPoint\n    {\n        // A 3d colored point\n        MyPoint(int c, int x, int y, int d) :\n                 color(c), x(x), y(y), d(d) {}\n        int color;\n        int x;\n        int y;\n        int d;\n    };\n\nYou define a vector of `MyPoint` objects carefully ordered by color, depth, height and width.\n\n    int width = 100;\n    int height = 100;\n    int depth = 5;\n    int colors = 2;\n\n    int len = width * height * colors * depth;\n    std::vector<MyPoint> pts;\n    pts.reserve(len);\n\n    for (int c=0; c<colors; ++c)\n        for (int d=0; d<depth; ++d)\n            for (int y=0; y<height; ++y)\n                for (int x=0; x<width; ++x)\n                    pts.push_back(MyPoint(c, x, y, d));\n\nThen one of your funny colleagues put a\n\n    std::random_shuffle(pts.begin(), pts.end());\n\njust the line before you are scanning the ordered array of `MyPoint`... If it's not a colleague, could be that you need to apply a transformation matrix to all of your points, or whatever else that will break the color, depth, height and width ordering of your set.\n\nTo order back your vector by the same priorities, you can use the STL sort algorithm with some custom comparison function.\nThe the first function I wrote was this:\n\n    bool mypoint_all_sort_fn(const MyPoint& p0, const MyPoint& p1)\n    {\n        if (p0.color < p1.color)\n            return true;\n        else if (p0.color == p1.color)\n            if (p0.d < p1.d)\n                return true;\n            else if (p0.d == p1.d)\n                if (p0.y < p1.y)\n                    return true;\n                else if (p0.y == p1.y)\n                    if (p0.x < p1.x)\n                        return true;\n        return false;\n    }\n\nand then `std::sort(pts.begin(), pts.end(), mypoint_all_sort_fn);`\n\nI found this solution the ugliest among the others. It's not scalable, has too many indentations and strong code dependancy... And also if `mypoint_all_sort_fn` was defined as operator inside `MyStruct` declaration I wouldn't like to have such a function inside my software.\n\nThe second solution I came to was using several `stable_sort`\n\n    bool mypoint_x_sort_fn(const MyPoint& p0, const MyPoint& p1)\n    {\n        return p0.x < p1.x;\n    }\n    bool mypoint_y_sort_fn(const MyPoint& p0, const MyPoint& p1)\n    {\n        return p0.y < p1.y;\n    }\n    bool mypoint_d_sort_fn(const MyPoint& p0, const MyPoint& p1)\n    {\n        return p0.d < p1.d;\n    }\n    bool mypoint_c_sort_fn(const MyPoint& p0, const MyPoint& p1)\n    {\n        return p0.color < p1.color;\n    }\n\nand then\n\n    std::stable_sort(pts.begin(), pts.end(), mypoint_x_sort_fn);\n    std::stable_sort(pts.begin(), pts.end(), mypoint_y_sort_fn);\n    std::stable_sort(pts.begin(), pts.end(), mypoint_d_sort_fn);\n    std::stable_sort(pts.begin(), pts.end(), mypoint_c_sort_fn);\n\nI found this solution not too bad by the code style point of view, but it's not the same about performances. More are the values you want to sort by, more are the stable_sort steps you have to do.\n\nThe last solution, which I found the most fascinating one, was suggested to me by two of my collegues, and it took me a just a small bunch of time to write the code down.\n\n    template <typename T> int element(const T&, int i);\n\n    template <typename T, int I> struct Orderer\n    {\n        static bool compare(const T& t0, const T& t1)\n        {\n            if (element(t0, I) == element(t1, I))\n                return Orderer<T, I-1>::compare(t0, t1);\n            else\n                return element(t0, I) < element(t1, I);\n        }\n    };\n    template <typename T> struct Orderer<T, -1>\n    {\n        static bool compare(const T& t0, const T& t1)\n        {\n            return false;\n        }\n    };\n\nUsing templates it's possible to make the compiler generate the ugly if-else code. Then the task of providing the right element for the sorting is demanded to an element(int) function. Also, it's possible substitute the element(int) function with an element(int) member function (or maybe an operator) in `MyPoint` definition. This is how it work:\n\n    template <> int element<MyPoint>(const MyPoint& p, int i)\n    {\n        // Watch out!\n        // The higher is the i-value, the most significant is the member\n        switch(i)\n        {\n            case 3:\n                return p.color;\n            case 2:\n                return p.d;\n            case 1:\n                return p.y;\n            case 0:\n                return p.x;\n            default:\n                throw std::invalid_argument(\"Undefined element\");\n        }\n    }\n    bool mypoint_sort(const MyPoint& t0, const MyPoint& t1)\n    {\n        return Orderer<MyPoint, 3>::compare(t0, t1);\n    }\n\nand then `std::sort(pts.begin(), pts.end(), mypoint_sort);`\n\nThat's it! A more readable switch-case statement provides the priority of sorting.... and the `mypoint_sort` function call the template right specialization of Orderer Struct static compare function.\n\nHere how you can find, compile and run the code for this example:\n\n    git clone git://github.com/cybercase/funproject.git\n    cd funproject/other\n    g++ order.cpp -o order -Wall\n\nOne interesting thing I discovered while writing the code of this example, is that you can't use template function specialization. I found a discussion about this topic at <http://www.gotw.ca/publications/mill17.htm>. The Peter Dimov and Dave Abrahams example shows why template specialization can't be done with functions.\n\n_-- 15/01/2012_\n"},{"slug":"inspiration_code3","title":"Inspiration Code - part 3","description":"Code I wrote after reading a book - third part","date":"2011-12-29T00:00:01.000Z","content":"\n# Inspiration Code\n\n## Part 3\n\nThe last of these three parts summary is about `_thread` and `Result` structures.\n\n`_thread` is a just a container for `pthread_t` and `pthread_attr_t` thread variables. It provides a wrapper for pthread_create and pthread_detach functions, and a member variable for storing the called function return value... However the most important task accomplished by this structure is reference counting.\n\n    template <typename T> struct _thread\n    {\n        // This struct will hold the return value of the thread called func.\n\n        _thread() : counter(0)\n        {\n            pthread_attr_init(&attr);\n            pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n        }\n\n        ~_thread() { pthread_detach(thd); }\n\n        T result;\n        pthread_t thd;\n        pthread_attr_t attr;\n        volatile int counter;\n\n        int join() { return pthread_join(thd, NULL); }\n        int start(void*(f)(void*), void* v)\n        {\n            return pthread_create(&thd, &attr, f, v);\n        }\n\n        // Atomic function for add and sub\n        int inc() { return __sync_fetch_and_add(&counter, 1); }\n        int dec()\n        {\n            if (__sync_fetch_and_sub(&counter, 1) == 0)\n                delete this;\n            return counter;\n        }\n\n        private:\n        _thread(const _thread&);\n        _thread& operator=(const _thread&);\n    };\n\n`_thread` has both inc/dec member functions that are called everytime the structure instance is referenced/dereferenced by some other object. When the dec member function is called and the counter becomes zero, then the destructor is invoked and `_thread` is deleted. Also, the destructor calls `pthread_detach`, so that thread's resources can be freed.\n\nThis reference counting mechanism is very important since we want that `_help_fn` and `_help_st` saves the computation results in a place from which we can fetch the result...\n\nTo clarify: we can't just launch the thread (that executes `_help_fn`), save the results and delete everything. We need to be sure that we are deleting the result at the right time.\n\nThis is why, when a new thread is created, the corresponding `_thread` object is referenced both by a `_help_st` and a `Result` object. In this way, at the end of `_help_fn`, when `_help_st` is deleted, the dec function of `_thread` object is called by `_help_st` destructor...\nBut `_thread` object is deleted only if also the corresponding `Result` object is already deleted.\n\n    template <typename T> struct Result\n    {\n\n        Result(_thread<T>* thd) : thd(thd)\n        {\n            thd->inc();\n        }\n\n        Result(const Result<T>& o)\n        {\n            thd->inc();\n            thd = o.thd;\n        }\n\n        Result<T>& operator=(const Result& o)\n        {\n            o.thd->inc();\n            thd->dec();\n            thd = o.thd;\n            return *this;\n        }\n\n        T value()\n        {\n            switch (thd->join())\n            {\n                case 0:\n                  break;\n                case EINVAL:\n                  throw std::runtime_error(\"EINVAL on pthread_join\");\n                  break;\n                case EDEADLK:\n                  throw std::runtime_error(\"EDEADLK on pthread_join\");\n                  break;\n                case ESRCH:\n                  // Thread already exited\n                  break;\n            }\n            return thd->result;\n        }\n\n        ~Result()\n        {\n            thd->dec();\n        }\n\n        _thread<T>* thd;\n    }\n\nThe `Result` object is the one that is returned to the user who started a new thread. So, if the user keep it, he can fetch the return value through the `Result` object.\nOtherwise the `Result` object is automatically destroyed and corresponding `_thread` object is deleted when dec is called by `_help_st` destructor.\n\nTo close this last part, here are the static methods of `Thread` class for creating a new thread that runs a function, a functor or an instance method having one argument. The signature is similar for functions, functors, and instance methods having more than one arument.\nAs you see the return value of these function is a `Result` object.\n\n    template <typename T, typename O, typename I0> static Result<T>\n    run(O obj, I0 a0)\n    {\n        _functor1<T, O, I0> o(obj, a0);\n        return Result<T>(_start<T>(o));\n    }\n\n    template <typename T, typename I0> static Result<T>\n    run(T(*fun)(I0), I0 a0)\n    {\n        _functor1<T, T(*)(I0), I0> f(fun, a0);\n        return Result<T>(_start<T>(f));\n    }\n\n    template <typename T, typename C, typename I0> static Result<T>\n    run(C* c, T(C::*fun)(I0), I0 a0)\n    {\n        _class_functor1<T, C, I0> f(c, fun, a0);\n        return Result<T>(_start<T>(f));\n    }\n\nReturning `Result` object is assigned a `_thread` object, created by `_start` helper function in `Thread` class.\n\n    template <typename T, typename F> static _thread<T>*\n    _start(const F& functor)\n    {\n        _thread<T>* mythread = new _thread<T>();\n        _help_st<T, F >* h2 = new _help_st<T, F>(mythread, functor);\n        mythread->start(_help_fn<_help_st<T, F> >, h2);\n        return mythread;\n    }\n\nI hope you enjoyed this post serie... If you have question or you need some clarification, just leave a comment. I will be happy to answer or rewrite the unclear part\n\n_-- 29/12/2011_\n"},{"slug":"inspiration_code2","title":"Inspiration Code - part 2","description":"Code I wrote after reading a book - second part","date":"2011-12-20T00:00:01.000Z","content":"\n# Inspiration Code\n\n## Part 2\n\nSince the `pthread_create` function signature allows running of `void*(*)(void*)` function type only, I was quite sure on packaging into a struct both the callable object and its args, and pass them to some function matching that signature. Here is the \"some function\" I named `_help_fn`:\n\n    template <S> void* _help_fn(void* v)\n    {\n        // This function signature match the one needed by\n        // pthread_create func.\n        S* st = (S*)v;\n        st->exec();\n        delete st;\n        return NULL;\n    };\n\nThe `S` template parameter is meant to be the type of a package struct. The exec() method from this struct should call any callable type, together with its arguments and, obviously, write somewhere the return value of the call.\nThis is how I wrote the package struct, named `_help_st`.\n\n    template <typename T, typename I> struct _help_st\n    {\n        _help_st(_thread<T>* t, I f) : functor(f)\n        {\n            thd = t;\n            thd->inc();\n        }\n\n        ~_help_st()\n        {\n            thd->dec();\n        }\n\n        I functor;\n        _thread<T>* thd;\n\n        void exec()\n        {\n            thd->result = functor();\n        }\n    };\n\nFor now, don't pay too much attention to the `_thread` member variable... You just need to know that this member variable holds the result of thread's computations.\nI assigned `exec()` member function just the task of storing the returned value by a some callable object. The return value type is told by template parameter `T`. Then, the dirty job of calling the function with all of its args is left to a functor object of type `I`.\n\nI didn't find any other way than writing as many functors as needed to match all of the previously told callable types.\nThis is the functor for instance method pointers receiving one arg:\n\n    template <typename T, typename C, typename I0> struct _class_functor1\n    {\n        _class_functor1(C* c, T(C::*m)(I0), I0 a0) : m(m), c(c), a0(a0) {}\n        T operator()() { return (c->*m)(a0); }\n        T(C::*m)(I0);\n        C* c;\n        I0 a0;\n    }\n\nAnd this is the functor for all the other kinds of callable objects receiving one arg:\n\n    template <typename T, typename O, typename I0> struct _functor1\n    {\n        _functor1(O obj, I0 a0) : o(obj), a0(a0) {}\n        T operator()() { return o(a0); }\n        O o;\n        I0 a0;\n    }\n\nI needed a special functor object like `_class_functor1` for handling instance methods. This is because C++ don't provide a way to store the callable result of `(c->*m)`.\n\n_-- 20/12/2011_\n"},{"slug":"inspiration_code","title":"Inspiration Code","description":"Code I wrote after reading a book","date":"2011-12-19T00:00:01.000Z","content":"\n# Inspiration Code\n\nA couple of week ago I run into Modern C++ Design, a book from Andrei Alexandrescu.\nI read it all the way in just a few days. That was so fascinating! This book shows\nyou the unknown and magic power of template metaprogramming... a kind of _avada kedavra_ of C++.\n\nI've got uncertain reviews from my colleagues about this book... But my opinion is definitely a ten out of ten.\n\nBut now, let's get to the topic! Just a few day ago, I started writing some code for one of my so-called \"funprojects\". A snippet of code contained in thread.h file to wraps pthreads functions with a Thread class. After few attempts I decided that my Thread class should be able to execute everything that is a callable in C++.\n\nFrom Modern C++ Design, here is the list of entities that support operator `()`.\n\n- C-like functions\n- C-like pointers to functions\n- References to functions\n- Functors (object that defines operator() )\n\nThe result of applying operator `.*` or operator `->*` having a pointer to a member function in the right-hand side of the expression.\nThe behavior that I was trying to achieve for any of them was\n\n`RETURN_TYPE result = Thread::run(some_callable, arg1, arg2, ...);`\n\nAnd this is what I've got in the end\n\n    // main.cpp\n    #include <iostream>\n    #include \"thread.h\"\n    int myfun(int i)\n    {\n        std::cout << \"myfun received: \" << i << std::endl;\n        return i*2;\n    }\n\n    class myclass\n    {\n    public:\n\n        myclass(int i) : i(i) {}\n\n        int mymember(int k)\n        {\n            std::cout << \"mymember received: \" << k << std::endl;\n            return i*2;\n        }\n        int i;\n\n        int operator()(int j)\n        {\n            std::cerr << \"operator received: \" << j << std::endl;\n            return i*2;\n        }\n\n    };\n\n    int main(int argc, char** argv)\n    {\n\n        int (*mypt)(int) = &myfun;\n        int (&myref)(int) = myfun;\n        myclass mc(5);\n\n        // Call to function\n        Result<int> r0 = Thread::run(myfun, 0);\n        std::cout << \"retval:\" << r0.value() << std::endl;\n\n        // Call to function pointer\n        Result<int> r1 = Thread::run(mypt, 1);\n        std::cout << \"retval:\" << r1.value() << std::endl;\n\n        // Call to function reference\n        Result<int> r2 = Thread::run(myref, 2);\n        std::cout << \"retval:\" << r2.value() << std::endl;\n\n        // Call to functor\n        Result<int> r3 = Thread::run<int>(mc, 3);\n        std::cout << \"retval:\" << r3.value() << std::endl;\n\n        // Call to member function pointer\n        Result<int> r4 = Thread::run(&mc, &myclass::mymember, 4);\n        std::cout << \"retval:\" << r4.value() << std::endl;\n\n        return 0;\n    }\n\nIn the next post I'm going to show some details of the code in `thread.h`.\n\nWant to compile and run this code?!\n\n    git clone git://github.com/cybercase/funproject.git\n    cd funproject/other\n    g++ concurrent.cpp -o concurrent -Wall # add -lpthread if you are on a linux system\n\n_-- 19/12/2011_\n"}]},"__N_SSG":true}